<?xml version="1.0" encoding="utf-8"?>
<grg:TabModule 
	width="100%" height="100%"
	layout = "horizontal"
	locale = "operationLogModule"
	xmlns:fx = "http://ns.adobe.com/mxml/2009"
	xmlns:s = "library://ns.adobe.com/flex/spark"
	xmlns:mx = "library://ns.adobe.com/flex/mx"
	xmlns:parsley="http://www.spicefactory.org/parsley" 
	xmlns:grg="http://grg.grgbanking.com/platform/" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<parsley:ContextBuilder>
			<parsley:ViewSettings autoremoveViewRoots="false"/>
			<parsley:Scope name="module"/> 
			<parsley:MessageSettings defaultReceiverScope="module"/>
			<parsley:FlexConfig type="{OperationLogConfig}"/>
			<!--<parsley:FlexConfig type="{DataDictConfig}"/>-->
		</parsley:ContextBuilder>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import platform.common.manager.AlertHandler;
			import platform.common.util.DataGridUtil;
			import platform.common.vo.Page;
			import platform.global.AppGlobal;
			import platform.log.LogMessage;
			import platform.log.config.OperationLogConfig;
			import platform.log.pm.OperationLogModulePM;
			
			import sent.common.utils.DateUtils;
			
			/*========================================================*/
			/*   Property                                             */
			/*========================================================*/
			[Inject]
			[Bindable]
			public var pm:OperationLogModulePM;
			
			/*========================================================*/
			/*   Function                                             */
			/*========================================================*/
			//			private const OPERATIONS:String = "SysDatadirMgr.javapt.log.operName";
			
			//			override protected function getDataDictCallback():void
			//			{
			//				(operationDataGrid.dataProvider as ListCollectionView).refresh();
			//			}
			
			/**显示数据字典转换出来的值**/
			//			override protected function transferDataDict(p_item:Object, column:DataGridColumn):String
			//			{
			//				if(column.dataField == "operName")
			//					currentDataDictPath = OPERATIONS;
			//				return super.transferDataDict(p_item, column);
			//			}
			
			private function transformBtnI18nName(p_item:Object, column:DataGridColumn):String
			{
				var n:int = AppGlobal.privilegeButtons.length;
				for(var i:int = 0;i < n;i++){
					var item:Object = AppGlobal.privilegeButtons.getItemAt(i);
					if(p_item["operName"] == item["buttonCode"])
						return item["i18nName"];
				}
				return null;
			}
			
			override protected function viewUpdateComplete():void
			{
				pm.searchOperationLogs();
				privilegeBar.menuId = menu.id;
			}
			
			override public function dispose():void
			{
				operationDataGrid.checkedItems = [];
				resetBtn.reset();
			}
			
			/**
			 * Add a new card type
			 */
			public function add():void
			{
				trace("there is not privilege to add something.");
			}
			/**
			 * Del the selected card type
			 */
			public function del():void
			{
				if (!operationDataGrid.checkedItems || operationDataGrid.checkedItems.length < 1){
					AlertHandler.alert("noSelectedRecord");
					//AlertHandler.error("必须选择至少一项!!!");
					return;
				}
				AlertHandler.confirm(closeHandler, null, "confirmDelete");
				//close handler
				function closeHandler(evt:CloseEvent):void
				{
					if (evt.detail == Alert.YES){
						pm.delLogs(DataGridUtil.getItemsValue("id",
							operationDataGrid.checkedItems).source);
					}
				}
			}
			/**
			 * Update a card type
			 */
			public function edit():void
			{
				trace("there is not privilege to edit something.");
			}
			
			/**
			 * 获取页结果集
			 */		
			[MessageHandler(selector="delOperationLogsSuccess")]
			public function delLogHandler(p_msg:LogMessage):void
			{
				//清空已选中行
				if(p_msg.result)
					operationDataGrid.checkedItems = [];
			}
			
			public function dateFormatBegin(date:Date):Date
			{
				date.setHours(0,0,0,0);
				return date;
			}
			
			public function initSelectDate():void
			{
				logTimeStart.selectedDate=dateFormatBegin(new Date());
				logTimeEnd.selectedDate = DateUtils.createDate(1, 'yyyyMMdd');
			}

		]]>
	</fx:Script>
	<fx:Binding source="userId.text" destination="pm.cond.userId"/>
	<fx:Binding source="logTimeStart.selectedDate" destination="pm.cond.logTimeStart"/>
	<fx:Binding source="logTimeEnd.selectedDate" destination="pm.cond.logTimeEnd"/>
	<mx:VDividedBox width="100%" height="100%">
		<s:BorderContainer 
			width="100%" height="100%"
			styleName = "BorderContainer">
			<s:layout>
				<s:VerticalLayout gap="0" />
			</s:layout>
			
			<!--<grg:TitleBar/>-->
			
			<mx:HBox width="100%" styleName="firHBoxStyle">
				<grg:TitleBar locale="titlemsg" width="30%"/>
				<mx:HBox width="100%" styleName="senHBoxStyle">
					<mx:HBox styleName="searchStyle">
						<s:BorderContainer width = "100%" height = "25" backgroundAlpha="0" borderVisible = "false">
							<s:layout>
								<s:HorizontalLayout 
									horizontalAlign = "left" 
									gap="5"
									verticalAlign = "middle" />
							</s:layout>
							<grg:Label locale = "beginTime" />
							<grg:SuperDateField id="logTimeStart" width="165" myEnabled="false" selectableRange="{{rangeEnd:logTimeEnd.selectedDate}}"
												creationComplete="logTimeStart.selectedDate=dateFormatBegin(new Date())" isShowTime="true" />
							<grg:Label locale = "to" />
							<grg:SuperDateField id="logTimeEnd" width="165" myEnabled="false" selectableRange="{{rangeStart: logTimeStart.selectedDate}}" 
												creationComplete="logTimeEnd.selectedDate=DateUtils.createDate(1, 'yyyyMMdd')" isShowTime="true" />
							
							<grg:Label locale = "userId" />
							<grg:TextInput id="userId" textAlign="left" restrict="^'"
										   width="150" height="20"
										   styleName = "TextInput" /> 
							<grg:SearchButton id="btn_search" menuId="{menu.id}"
											  locale = "searchButton" 
											  iconType = "query" click="pm.page = new Page();pm.searchOperationLogs()"/>
							<grg:ResetButton id="resetBtn" iconType="reset" locale="resetButton" click="initSelectDate();" resetControls="{[userId]}"/>
						</s:BorderContainer>
					</mx:HBox> 
				</mx:HBox>
			</mx:HBox> 
			<mx:HBox width="100%" height="30" verticalAlign="top" paddingLeft="10">
				<s:BorderContainer styleName="moduleButtonBarstyle" height="26">
					<s:layout>
						<s:HorizontalLayout paddingLeft="4" paddingTop="2"/>
					</s:layout>
					<grg:GRGModuleButtonBar id="privilegeBar" barType="button" menuId="{menu.id}"/>
				</s:BorderContainer>
			</mx:HBox>
			<mx:HBox width="100%" height="100%" styleName="datagridHBoxStyle">
				 <grg:DataGrid id="operationDataGrid" dataProvider="{pm.page.result}"
							  width="100%" height="100%"
							  textAlign = "center"
							  styleName = "DataGrid"
							  borderVisible = "true">
					<grg:columns>
						<grg:CheckBoxColumn id="checkBoxCol"
											sortable = "false"
											draggable = "false"
											editable = "false"
											resizable = "false" 
											/>
						<grg:DataGridColumn locale = "userId"
											dataField = "userId" 
											textAlign = "left"
											/>
						<grg:DataGridColumn locale = "userName"
											dataField = "userName" 
											textAlign = "left"
											/>
						<grg:DataGridColumn locale = "hostIp"
											dataField = "hostIp"
											textAlign = "left"
											/>
						<grg:DataGridColumn locale = "logTime" 
											labelFunction="{DataGridUtil.formatTime}"
											dataField = "logTime" 
											textAlign = "center"
											/>
						<grg:DataGridColumn locale = "menuName"
											dataField = "name" 
											textAlign = "left"
											/>
						<grg:DataGridColumn locale = "operName" 
											labelFunction="{transformBtnI18nName}"
											dataField = "operName" 
											textAlign = "left"
											/>
						<grg:DataGridColumn locale = "note"
											dataField = "note" 
											textAlign = "left"
											/>
					</grg:columns>
				</grg:DataGrid>
			</mx:HBox>
			<grg:PageNavigatorBar id="buttonPagingBar" bottom = "0" 
								  pageVo="{pm.page}"
								  pagingFunction="{pm.searchOperationLogs}"/>
		</s:BorderContainer>
	</mx:VDividedBox>
</grg:TabModule>