<?xml version="1.0" encoding="utf-8"?>
<grg:TabModule xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:grg="http://grg.grgbanking.com/platform/" 
				xmlns:view="platform.log.view.*"
				xmlns:parsley="http://www.spicefactory.org/parsley" 
				dataDictionaryPaths="{[LOGIN_RESULT, LOGIN_REMARK]}"
				width="100%" height="100%"
				layout="horizontal" 
				xmlns:userDefined="platform.date.*"
				locale="loginLogModule">
	
	<fx:Declarations>
		<parsley:ContextBuilder>
			<parsley:ViewSettings autoremoveViewRoots="false"/>
			<parsley:Scope name="module"/> 
			<parsley:MessageSettings defaultReceiverScope="module"/>
			<parsley:FlexConfig type="{LoginLogConfig}"/>
			<parsley:FlexConfig type="{DataDictConfig}"/>
		</parsley:ContextBuilder>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import platform.common.manager.AlertHandler;
			import platform.common.util.DataGridUtil;
			import platform.common.vo.Page;
			import platform.dataDict.DataDictConfig;
			import platform.log.LogMessage;
			import platform.log.config.LoginLogConfig;
			import platform.log.pm.LoginLogModulePM;
			
			import sent.common.utils.DateUtils;
			
			/*========================================================*/
			/*   Property                                             */
			/*========================================================*/
			[Inject]
			[Bindable]
			public var pm:LoginLogModulePM;
			
			/*========================================================*/
			/*   Function                                             */
			/*========================================================*/
			
			private const LOGIN_RESULT:String = "SysDatadirMgr.javapt.common.successOrFail";
			private const LOGIN_REMARK:String = "SysDatadirMgr.javapt.log.loginRemark";
			
			override protected function getDataDictCallback():void
			{
				(loginDataGrid.dataProvider as ListCollectionView).refresh();
			}
			
			private function transferResult(p_item:Object, column:DataGridColumn):String
			{
				currentDataDictPath = LOGIN_RESULT;
				return super.transferDataDict(p_item, column);
			}
			
			private function transferNote(p_item:Object, column:DataGridColumn):String
			{
				currentDataDictPath = LOGIN_REMARK;
				return super.transferDataDict(p_item, column);
			}
			
			override protected function viewUpdateComplete():void
			{
				pm.searchLoginLogs();
				privilegeBar.menuId = menu.id;
			}
			
			override public function dispose():void
			{
				loginDataGrid.checkedItems = [];
				resetBtn.reset();
			}
			
			/**
			 * Add a new card type
			 */
			public function add():void
			{
				trace("there is not privilege to add something.");
			}
			
			/**
			 * Del the selected card type
			 */
			public function del():void
			{
				if (!loginDataGrid.checkedItems || loginDataGrid.checkedItems.length < 1)
				{
					AlertHandler.alert("noSelectedRecord");
					return;
				}
				AlertHandler.confirm(closeHandler, null, "confirmDelete");
				//close handler
				function closeHandler(evt:CloseEvent):void
				{
					if (evt.detail == Alert.YES){
						pm.delLogs(loginDataGrid.checkedItems);
					}
				}
			}
			/**
			 * Update a card type
			 */
			public function edit():void
			{
				trace("there is not privilege to edit something.");
			}
			
			/**
			 * 获取页结果集
			 */		
			[MessageHandler(selector="delLoginLogSuccess")]
			public function delLogHandler(p_msg:LogMessage):void
			{
				//清空已选中行
				if(p_msg.result)
				{
					loginDataGrid.checkedItems = [];
				}
			}
			
			public function dateFormatBegin(date:Date):Date
			{
				date.setHours(0,0,0,0);
				return date;
			}
			
			public function initSelectDate():void
			{
				logTimeStart.selectedDate=dateFormatBegin(new Date());
				logTimeEnd.selectedDate = DateUtils.createDate(1, 'yyyyMMdd');
			}
		]]>
	</fx:Script>
	
	<fx:Binding source="userId.text" destination="pm.cond.userId"/>
	<fx:Binding source="logTimeStart.selectedDate" destination="pm.cond.logTimeStart"/>
	<fx:Binding source="logTimeEnd.selectedDate" destination="pm.cond.logTimeEnd"/>
	
	<mx:VDividedBox width="100%" height="100%">
		
		<s:BorderContainer width="100%" height="100%" styleName="BorderContainer">
			
			<s:layout>
				<s:VerticalLayout gap="0" />
			</s:layout>
			
			<mx:HBox width="100%" styleName="firHBoxStyle">
				
				<!--登录日志-->
				<grg:TitleBar locale="titlemsg" width="50%"/>
				
				<mx:HBox width="100%" styleName="senHBoxStyle">
					
					<mx:HBox styleName="searchStyle">
						
						<s:BorderContainer width="100%" height="25" backgroundAlpha="0" borderVisible="false">
							
							<s:layout>
								<s:HorizontalLayout horizontalAlign="left" gap="8" verticalAlign="middle" />
							</s:layout> 
							
							<!--时间范围：-->
							<grg:Label locale="beginTime" />
							<userDefined:SuperDateField id="logTimeStart" width="165" myEnabled="false" selectableRange="{{rangeEnd:logTimeEnd.selectedDate}}" 
												creationComplete="logTimeStart.selectedDate=dateFormatBegin(new Date())"
												isShowTime="true" />
							<grg:Label locale="to" />
							<userDefined:SuperDateField id="logTimeEnd" width="165" myEnabled="false" selectableRange="{{rangeStart: logTimeStart.selectedDate}}" 
												creationComplete="logTimeEnd.selectedDate=DateUtils.createDate(1, 'yyyyMMdd')" isShowTime="true" />
							
							<!--用户帐号：-->
							<grg:Label locale="userIdColon" />
							<grg:TextInput id="userId" textAlign="left" restrict="^'"
										   width="150" height="20"
										   styleName="TextInput" />
							
							<grg:SearchButton id="btn_search" menuId="{menu.id}"
											  locale="searchButton" 
											  iconType="query" click="pm.page=new Page();pm.searchLoginLogs()"/>
							<grg:ResetButton id="resetBtn" iconType="reset" locale="resetButton" click="initSelectDate();" resetControls="{[userId]}"/>
						</s:BorderContainer>
					</mx:HBox>
					
				</mx:HBox>
			</mx:HBox>  
			
			
			<mx:HBox width="100%" height="30" verticalAlign="top" paddingLeft="10">
				<s:BorderContainer styleName="moduleButtonBarstyle" height="26">
					<s:layout>
						<s:HorizontalLayout paddingLeft="4" paddingTop="2"/>
					</s:layout>
					<grg:GRGModuleButtonBar id="privilegeBar" barType="button" menuId="{menu.id}"/>
				</s:BorderContainer>
			</mx:HBox>
			
			
			<mx:HBox width="100%" height="100%" styleName="datagridHBoxStyle">
				
				<grg:DataGrid id="loginDataGrid" dataProvider="{pm.page.result}" width="100%" height="100%"
							  textAlign="center" styleName="DataGrid" borderVisible="true">
					<grg:columns>
						<grg:CheckBoxColumn id="checkBoxCol" sortable="false" draggable="false" editable="false" resizable="false" />
						<!--用户帐号-->
						<grg:DataGridColumn locale="userId" dataField="userId" textAlign="left" />
						<!--用户名-->
						<grg:DataGridColumn locale="userName" dataField="userName"  textAlign="left" />
						<!--客户端 ip-->
						<grg:DataGridColumn locale="hostIp" dataField="hostIp"  textAlign="left" />
						<!--登入时间-->
						<grg:DataGridColumn locale="loginTime" dataField="loginTime"  textAlign="center" labelFunction="{DataGridUtil.formatTime}" />
						<!--登出时间-->
						<grg:DataGridColumn locale="logoutTime" dataField="logoutTime"  textAlign="center" labelFunction="{DataGridUtil.formatTime}" />
						<!--登录结果-->
						<grg:DataGridColumn locale="result" dataField="result" textAlign="left" labelFunction="{transferResult}" />
						<!--备注-->
						<grg:DataGridColumn locale="note" dataField="note" textAlign="left" labelFunction="{transferNote}" />
					</grg:columns>
				</grg:DataGrid>
			</mx:HBox>
			<grg:PageNavigatorBar id="buttonPagingBar" bottom="0" pageVo="{pm.page}" pagingFunction="{pm.searchLoginLogs}"/>
		</s:BorderContainer>
	</mx:VDividedBox>
</grg:TabModule>