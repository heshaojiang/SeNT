<?xml version = "1.0" encoding = "utf-8"?>
<grg:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:parsley="http://www.spicefactory.org/parsley"
				 xmlns:grg="http://grg.grgbanking.com/platform/" 
				 dataDictionaryPaths="{[DataDirConsts.YES_OR_NO, DataDirConsts.TERM_STATUS,NoderConsts.RUNNING_STATUS]}"
				 paramPaths="{[NoderConsts.FEEL_DIST_PORT_DEFAULT, NoderConsts.CASH_LACK_NUM, NoderConsts.CASH_FULL_NUM]}"
				 locale="noderVersionInfoModule"
				 layout="vertical"
				 width="650" height="500"  
				 >
	
	<fx:Declarations>
		<parsley:Configure reuse="false"/>
		<mx:NumberFormatter id="fileSizeFormatter" useThousandsSeparator="true"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.core.UIComponent;
			import mx.utils.ObjectUtil;
			
			import platform.common.manager.AlertHandler;
			import platform.common.manager.PopUpManager;
			import platform.common.util.StringUtil;
			import platform.common.validator.VControl;
			import platform.constants.DataDirConsts;
			import platform.constants.LocaleConsts;
			import platform.constants.OperationConsts;
			import platform.term.constants.NoderConsts;
			import platform.term.constants.TermLocalKeyConsts;
			import platform.term.message.NoderVersionInfoMsg;
			import platform.term.pm.NoderVersionInfoFormPM;
			import platform.term.view.TermSelectForm;
			import platform.vo.term.TermBrandVo;
			import platform.vo.term.TermModelVo;
			import platform.vo.term.TermTypeVo;
			
			import sent.common.utils.TestUtils;
			

			/*========================================================*/
			/*   Property                                             */
			/*========================================================*/
			
			[Inject]
			[Bindable]
			public var pm:NoderVersionInfoFormPM;
			
			/**父级菜单
			[Bindable]
			public var parentName:String = "";
			**/
			/* [Bindable]
			private var yesOrNo:ArrayCollection; */
			
			/* [Bindable]
			private var termStatus:ArrayCollection; */
			
			[Bindable]
			private var allVersions:ArrayCollection;
			
			[Bindable]
			private var runningStatus:ArrayCollection;
			
			//节点类型。0=地市server；1=标准版节点机；2=柜面节点机
			[Bindable]
			private var noderFlags:IList;
			
			private var uploadBeginTimeValue:String ;
			private var uploadEndTimeValue:String ;
			private var bandWidthValue:String ;
			
			
			override protected function getDataDictCallback():void
			{
				/* yesOrNo = dataDictionaryCache[DataDirConsts.YES_OR_NO];
				termStatus = dataDictionaryCache[DataDirConsts.TERM_STATUS];
				runningStatus = dataDictionaryCache[NoderConsts.RUNNING_STATUS]; */
				noderFlags = bindableDataDirCache.getItemAt(3) as IList;
				//不要地市server类型
				noderFlags.removeItemAt(0);
			}
			
			override protected function getParamCallback():void
			{
				if(titleKey != TermLocalKeyConsts.ADD_TERMINFO_FORM)return;
				/* pm.noderInfo.netPort = sysParams[NoderConsts.FEEL_DIST_PORT_DEFAULT].value; */
				/* pm.noderInfo.cashLackNum = sysParams[NoderConsts.CASH_LACK_NUM].value;
				pm.noderInfo.cashFullNum = sysParams[NoderConsts.CASH_FULL_NUM].value; */
			}
			
			/**save success handler**/
			[MessageHandler(selector="saveResult")]
			public function saveBackHandler(p_msg:NoderVersionInfoMsg):void
			{
				var result:Object = p_msg.result;
				//已存在
				if(result == "-1"){
					AlertHandler.alert(LocaleConsts.NAME_ALREADY_EXISTED);
					//将提交按钮置为有效
					submitBtn.enabled = true;
					submitBtn.mouseEnabled = true;
				}
				close();
			}
			
			/**
			 * save error handler
			 */
			[MessageHandler(selector="saveError")]
			public function saveErrorHandler(p_msg:NoderVersionInfoMsg):void
			{
				//将提交按钮置为有效
				submitBtn.enabled = true;
				submitBtn.mouseEnabled = true;
			}
			
			
			public function set dataProvider(p_obj:Object):void
			{
				 pm.noderVersionInfoFormInitDatas = p_obj; 
				 allVersions = pm.noderVersionInfoFormInitDatas.versionList ;
				 var allItem:Object = {key:"", text:null};
				 allVersions.addItemAt(null,0) ;
				/*  TestUtils.printArrayCollection(allVersions) ; */
				/* TestUtils.printArrayCollection(allVersions) ;
				TestUtils.printArray(pm.noderVersionInfoFormInitDatas.versionList);
				TestUtils.printObject(pm.noderVersionInfoFormInitDatas.versionList) ; */
				 /* var str:String  = LanguageManager.getInstance().getCommonLanguageMap("components")["all"] as String ;
				 var allItem:Object = {key:"", text:str};
				 
				 var arrCol:ArrayCollection = ObjectUtil.copy(dataDictionaryCache[TransInfoConsts.NOTE_TYPE]) as ArrayCollection;
				 arrCol.addItemAt(allItem, 0);
				 sourceAll = arrCol;
				 
				 
				 termTypeAC.removeAll();
				 termTypeAC.addItem(allItem);
				 termTypeAC.addAll(ObjectUtil.copy(dataDictionaryCache[CmlSentInfoConsts.TERM_TYPE]) as ArrayCollection); */
				
			}
			
			
			private function showError(arr:Array):void
			{
				for(var i:int = arr.length; 0 < i; i--)
				{
					var ui:UIComponent = arr[i-1];
					ui.setFocus();
				}
				if(arr.length>0)
				{
					this.setFocus();
					arr[i].setFocus();		
				}
			}
			
			private function save():void
			{
				var arr:Array = VControl.validateAll(form, this.validators);
				var arr1:Array = VControl.validateAll(form1, this.validators);
				if(arr.length+arr1.length > 0) {
					return ;
				}
				//TestUtils.printObject(UserInfoInit.userInfo) ;
				/* termCode.text = StringUtil.trim(termCode.text); */
				/* noderIP.text = StringUtil.trim(noderIP.text);
				var arr:Array = VControl.validateAll(form, this.validators);
				var arr1:Array = VControl.validateAll(form1, this.validators);
				try
				{
				var parameterStr:String = null ; 
				if((uploadBeginTime.text != null && uploadBeginTime.text != "") || (uploadEndTime.text != null && uploadEndTime.text != "")) {
					parameterStr = "uploadtime:"+uploadBeginTime.text+"-"+uploadEndTime.text ;
				}
				if(bandWidth.text != null && bandWidth.text != "") {
					if(parameterStr != null) {
					parameterStr = parameterStr + ",bandwidth:"+bandWidth.text ;
					}
					else {
						parameterStr = "bandwidth:"+bandWidth.text ;
					}
				}
				pm.noderInfo.parameter = parameterStr ;
				if(parameterStr != null && parameterStr != ""){
				var parameters:Array = parameterStr.split(",");
				for(var i:int=0;i<parameters.length;i++){
					var param:Array = parameters[i].split(":");
					if(param.length<2){
						AlertHandler.alert("输入的参数信息非法，请检查并重新输入.");
						return;
					}
					if(param[0]=="uploadtime"){
						
						var timeReg:RegExp = /^(\d{1,2})$/;
						if(!timeReg.test(param[1])){
							AlertHandler.alert("输入的参数信息中uploadtime非法，请检查并重新输入.");
							return;
						}
						if(!timeReg.test(param[2].split("-")[0])){
							AlertHandler.alert("输入的参数信息中uploadtime非法，请检查并重新输入.");
							return;
						}
						if(!timeReg.test(param[2].split("-")[1])){
							AlertHandler.alert("输入的参数信息中uploadtime非法，请检查并重新输入.");
							return;
						}
						if(!timeReg.test(param[3])){
							AlertHandler.alert("输入的参数信息中uploadtime非法，请检查并重新输入.");
							return;
						}
						var startHour:int = parseInt(param[1]);
						var startMinute:int = parseInt(param[2].split("-")[0]);
						var endHour:int = parseInt(param[2].split("-")[1]);
						var endMinute:int = parseInt(param[3]);
						
						if(startHour > 23 || endHour > 23 || startMinute > 59 || endMinute > 59){
							AlertHandler.alert("输入的参数信息中uploadtime非法，请检查并重新输入.");
							return;
						}
						if(startHour < 0 || endHour < 0 || startMinute < 0 || endMinute < 0){
							AlertHandler.alert("输入的参数信息中uploadtime非法，请检查并重新输入.");
							return;
						}
					}else if(param[0]=="bandwidth"){
						var ma:RegExp = new RegExp("^[0-9]+$");
						if(!ma.test(param[1])){
							AlertHandler.alert("输入的参数信息中bandwidth非法，请检查并重新输入.");
							return;
						}
					}
					
				}
				}
				}
				catch(e:Error)
				{
					trace(e);
					AlertHandler.alert("输入的参数信息非法，请检查并重新输入.");
					return;
				
				} */
				pm.save(titleKey == TermLocalKeyConsts.ADD_TERMINFO_FORM ? OperationConsts.ADD : OperationConsts.EDIT);
				//将提交按钮置为无效，防止当前页面重复点击
				submitBtn.enabled = false;
				submitBtn.mouseEnabled = false;
			}
			



			override protected function cancel():void
			{
				pm.cancel();
				close();
			}
			 
			private function showExPropHandler(i:int):void
			{
				if(formContainer.x == 0 && i == 1)
				{
					showExPropEffect([formContainer], 0, -width);
					/* showExPropEffect([grgTileList], width, 0); */
				}
				else if(formContainer.x == -width && i==2)
				{
					showExPropEffect([formContainer], -width, 0);
					/* showExPropEffect([grgTileList], 0, width); */
				}
			} 
			
			private function drawCircle():UIComponent
			{
				var t:UIComponent= new UIComponent();
				var circle:Sprite = new Sprite();
				circle.graphics.lineStyle(2,0xffffff);
				circle.graphics.drawCircle(16, 0, 11);
				t.addChild(circle);
				return t;  
			} 
		 

			/* protected function orgId_changeHandler(event:IndexChangeEvent):void
			{
				
			} */
			
		
			//选择终端start
			/* public function termBrowseHandler():void
			{  
				trace("BlackRegulationModule.termBrowseHandler");
				var win:TermSelectForm = new TermSelectForm();
				win.initTermStr = device.text;
				win.callback = setSelectedTerm;
				
				context.viewManager.addViewRoot(win);
				PopUpManager.showForm4Parsley(win);
				
				win.showTermHandler("");
			} */
			/* private function setSelectedTerm(p_termStr:String):void
			{
				trace("BlackRegulationModule.setSelectedTerm");
				var termStr:String = p_termStr;
		
				device.text = termStr;
				
			} */
			//选择终端end
			

		
		
		
		
		
		
		
		
		
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			[Bindable]
			private var selectedFiles:ArrayCollection = new ArrayCollection([]);
			private var singleThreadFiles:Array = [];
			[Bindable]
			private var useSingleThread:Boolean = true;
			private var fileRefs: FileReferenceList = new FileReferenceList();
			private var urlrequest: URLRequest = new URLRequest("SeNT/fsn.fsnFilesImport?type=importNoderUpdatePackage");
			private var uploadeds:Array = [];
			
			[Bindable]
			private var noderTypesFEdit:IList;
			
			public function init(noderTypesFEdit:IList): void
			{
				this.noderTypesFEdit = noderTypesFEdit;
				Security.allowDomain("*");
				fileRefs.addEventListener(Event.SELECT, fileSelectHandler);
				fileRefs.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				fileRefs.addEventListener(Event.COMPLETE, completeHandler);
				addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);   
			}
			private function selectFile(): void
			{
				if(fileRefs.fileList!=null && fileRefs.fileList.length>=1){
					AlertHandler.alert("同一个版本中不允许上传多个版本包");
					return;
				}
				
				fileRefs.browse([new FileFilter("Zip(*.zip)", "*.zip")]);
			}
			private function fileSelectHandler(event: Event): void
			{
				for each (var f: FileReference in fileRefs.fileList)
				{
					var isIn:Boolean = false;
					for each( var ff:FileReference in selectedFiles){
						if(ff.name == f.name){
							isIn = true;
							break;
						}
					}
					if(!isIn){
						selectedFiles.addItem(f);
					}
				}
			}
			private function uploadFile(): void
			{               
				for each (var f: FileReference in selectedFiles)
				{
					var isUp:Boolean = false;
					for each(var fileName:String in uploadeds){
						if(fileName==f.name){
							isUp = true;
							break;
						}
					}
					if(isUp){
						continue;
					}
					try{
						if(StringUtil.trim(packageName.text)==""){
							packageName.text += f.name;
						}else{
							AlertHandler.alert("同一个版本中不允许上传多个版本包");
							return;
						}
						f.upload(urlrequest);
						uploadeds.push(f.name);
					}
					catch (e: Error){
						Alert.show(e.message);
					}
				}               
			}
			private function singleThreadUploadFile(): void
			{
				//FIFO：逐个从列表中取出，进行同步上传
				if (singleThreadFiles.length > 0)
				{
					var f: FileReference = singleThreadFiles.pop() as FileReference;
					var isUp:Boolean = false;
					for each(var fileName:String in uploadeds){
						if(fileName==f.name){
							isUp = true;
							break;
						}
					}
					if(!isUp){
						f.addEventListener(Event.COMPLETE, doSingleUploadFileComplete);
						f.upload(urlrequest);
						uploadeds.push(f.name);
					}else{
						singleThreadUploadFile();
					}
				}
			}
			private function doSingleUploadFileComplete(event: Event): void
			{
				var f: FileReference = event.target as FileReference;
				f.removeEventListener(Event.COMPLETE, doSingleUploadFileComplete);
				singleThreadUploadFile();
			}
			private function ioErrorHandler(e:IOErrorEvent): void
			{
				Alert.show(e.text);
			}
			private function completeHandler(e: Event): void
			{
				//img.source = e.target.data;
			}
			private function showImage(e: Event): void
			{               
				//var f: FileReference = (e.target as DataGrid).selectedItem as FileReference;
				//f.addEventListener(Event.COMPLETE, completeHandler);
				//f.load();
			}
			public function removeFile(f: FileReference): void
			{
				var index: int = selectedFiles.getItemIndex(f);
				if (index != -1)
					selectedFiles.removeItemAt(index);
			}
			protected function selectFileBut_clickHandler(event:MouseEvent):void
			{
				
			}
			
			protected function files_itemClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				//Alert.show("row");
			}
			
			/**
			 * 取消
			 */  
		/*	override protected function cancel():void
			{
				close();
			}*/
			
		]]>
		
	</fx:Script>
	<s:Group id="group" width="100%" clipAndEnableScrolling="true">
		
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		
		<grg:GRGMultiFormTabContainer id="formContainer" width="50%" forms="{[form, form1]}">
			<grg:Form id="form"
					  width="50%" height="100%"
					  paddingTop="20"
					  textAlign="left"
					  borderVisible="false">
				
				<!-- 节点软件类型 -->
				<grg:FormItem locale="noderType" required="true">
					<grg:ComboBox id="noderType" labelField="text" dataProvider="{noderTypesFEdit}"
								  valueField="key" selectedValue="@{pm.noderVersionInfo.noderType}" width="150"/>
				</grg:FormItem>
				
				<!--节点机版本号：-->
				<grg:FormItem id="noderVersion"
							  locale="noderVersionItem"
							  required="true">
					<grg:TextInput id="version" name="version" text="@{pm.noderVersionInfo.version}"
								   width="150" required="true" maxChars="8" restrict="0-9" editable="false"
								   />
				</grg:FormItem>
				
				
				<!--依赖的版本号：-->
				<grg:FormItem id="relayVersionItem" locale="relayVersionItem">
					<grg:ComboBox id="relayVersion" name="relayVersion" dataProvider="{allVersions}" valueField="data" labelField="data"
								  width="100" selectedItem="@{pm.noderVersionInfo.relayVersion}" required="false"/>
				</grg:FormItem>
				
				<!--版本包名称：-->
				<grg:FormItem id="packageNameItem" locale="packageNameItem" required="true" >
					<grg:TextArea id="packageName" name="packageName" text="@{pm.noderVersionInfo.packageName}"
								  width="150" maxChars="128" enabled="false" editable="false"  height="60" required="true" />
				</grg:FormItem>
			</grg:Form>
			<grg:Form id="form1"
					  width="50%" height="100%"
					  paddingTop="20"
					  textAlign="left"
					  borderVisible="false">
				
				<!--升级机构：-->
				<grg:FormItem id="orgIdItem" locale="orgIdItem" required="true" >
					<grg:GRGComboBoxOrgTree id="orgCode" selectedValue="@{pm.noderVersionInfo.orgCode}" 
											valueField="@orgCode" width="150"
											textAlign="left" treeHeight="150" 
											/>
				</grg:FormItem>
				<!--版本包名称：
				<grg:FormItem id="packageNameItem" locale="packageNameItem" required="true" >
					<grg:TextInput id="packageName" name="packageName" text="@{pm.noderVersionInfo.packageName}"
								   width="150" maxnum="128" required="true"
								   maxChars="128" />
				</grg:FormItem>
				-->
				<!--备注：-->
				<grg:FormItem id="remarkItem" locale="remarkItem" required="false" >
					<grg:TextArea id="remark" name="remark" text="@{pm.noderVersionInfo.remark}"
								  width="128" maxChars="256"  enabled="true" height="100" />
				</grg:FormItem>
			</grg:Form>
		</grg:GRGMultiFormTabContainer>
	</s:Group>	 
	
	
	<mx:VBox width="100%" height="100%" >
		<mx:HBox width="100%" height="10%">
			<s:Button label="浏览..." id="selectFileBut" click="selectFile()"/>
			<!--<mx:Box width="100%" horizontalAlign="right">
				<s:Button label="清空" click="selectedFiles.removeAll();"/>
			</mx:Box>-->
		</mx:HBox>
		<mx:DataGrid id="files" dataProvider="{selectedFiles}" change="showImage(event)" width="100%" height="100%" 
					 itemClick="files_itemClickHandler(event)">
			<mx:columns>
				<mx:DataGridColumn headerText="文件名" dataField="name" width="250"/>
				<mx:DataGridColumn headerText="大小(字节)" dataField="size" width="100" textAlign="center">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.fileSizeFormatter.format(data.size)}" textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="上传进度" width="200" textAlign="center">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox>
								<fx:Script>
									<![CDATA[
										import flash.events.ProgressEvent;
										import mx.controls.ProgressBar;
										import flash.events.ProgressEvent;
										
										import mx.controls.ProgressBar;
										import mx.events.FlexEvent;
										private function initProgressBar(event:Event):void{
											var pb:ProgressBar = event.target as ProgressBar;
											pb.label = "%3%%";
											pb.setProgress(0,100);
											var f:FileReference = data as FileReference;
											f.addEventListener(ProgressEvent.PROGRESS,function(event:ProgressEvent):void{
												pb.setProgress(event.bytesLoaded,event.bytesTotal);
											});
											f.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,function(event:DataEvent):void{
												pb.label = event.data;
											});
										}
									]]>
								</fx:Script>
								<mx:ProgressBar verticalCenter="true" width="100%" paddingLeft="5" paddingRight="5" 
												maximum="100" minimum="0" labelPlacement="center" mode="manual" 
												label="%3%%" textAlign="center" creationComplete="initProgressBar(event)"/>
								<!--
								<mx:LinkButton label="取消"> 
								<mx:click>
								<![CDATA[
								var f:FileReference = data as FileReference;
								f.cancel();
								]]>
								</mx:click>
								</mx:LinkButton>
								-->
								<!--
								<mx:LinkButton label="删除" textAlign="center"> 
									<mx:click>
										<![CDATA[
										var f:FileReference = data as FileReference;
										outerDocument.removeFile(f);
										]]>
									</mx:click>
								</mx:LinkButton>-->
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	<mx:HBox height="10%" width="100%">
		<mx:Button label="上传" >
			<mx:click>
				<![CDATA[
				//if(useSingleThread){
				//singleThreadFiles = selectedFiles.toArray().concat();
				//singleThreadFiles.reverse();
				//singleThreadUploadFile();
				//}else{
				uploadFile();
				//}
				]]>
			</mx:click>
		</mx:Button>
		<!--<mx:CheckBox id="checkboxSingleThread" label="同时上传多个文件" selected="{!useSingleThread}" 
					 change="useSingleThread = !checkboxSingleThread.selected"/>
		<mx:Box width="100%" horizontalAlign="right">
			<s:Button label="取消" click="cancel()"/>
		</mx:Box>-->
	</mx:HBox>
		
	<s:HGroup  width="100%" gap="10" horizontalAlign="center" verticalAlign="middle">
		<s:BorderContainer id="saveButton" height="27" styleName="buttonShadow">
			<s:layout>
				<s:HorizontalLayout paddingLeft="3" paddingRight="3" verticalAlign="middle"/>
			</s:layout>
			<grg:Button id="submitBtn" click="save()" locale="saveButton" iconVisible="false"/>
		</s:BorderContainer> 
		<s:BorderContainer height="27" styleName="buttonShadow">
			<s:layout>
				<s:HorizontalLayout paddingLeft="3" paddingRight="3" verticalAlign="middle"/>
			</s:layout>
			<grg:Button  click="cancel()" locale="cancelButton" iconVisible="false" />
		</s:BorderContainer>
		<!--<s:BorderContainer height="27" styleName="buttonShadow">
			<s:layout>
				<s:HorizontalLayout paddingLeft="3" paddingRight="3" verticalAlign="middle"/>
			</s:layout>
			<grg:Button  click="termBrowseHandler()" locale="termBrowse" iconVisible="false" />
		</s:BorderContainer>-->
	</s:HGroup> 
	
</grg:TitleWindow>

