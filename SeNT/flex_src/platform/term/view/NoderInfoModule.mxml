<?xml version="1.0" encoding="utf-8"?>
<grg:TabModule xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:parsley="http://www.spicefactory.org/parsley" 
			   xmlns:grg="http://grg.grgbanking.com/platform/"
			   dataDictionaryPaths="{[DataDirConsts.YES_OR_NO,NoderConsts.RUNNING_STATUS,NoderConsts.NODER_TYPE]}"
			   locale="noderInfoModule"
			   layout="horizontal"
			   width="100%" height="100%"
			   >
	<fx:Declarations>
		<parsley:ContextBuilder>
			<parsley:ViewSettings autoremoveViewRoots="false"/>
			<parsley:Scope name="NoderInfoModule"/> 
			<parsley:MessageSettings defaultReceiverScope="NoderInfoModule"/>
			<parsley:FlexConfig type="{NoderInfoModuleConfig}"/>
			<parsley:FlexConfig type="{BlackRegulationConfig}"/>
			<parsley:FlexConfig type="{ParamConfig}"/>
			<parsley:FlexConfig type="{DataDictConfig}"/>
			<parsley:FlexConfig type="{NoderFileConfig}"/>
		</parsley:ContextBuilder>
		<parsley:Configure/>
	</fx:Declarations>
	
	<!--<fx:Binding source="termCode.text" destination="pm.condi.termCode"/>-->
	<fx:Binding source="netAddr.text" destination="pm.condi.netAddr"/>
	<fx:Binding source="orgid.selectedValue" destination="pm.condi.orgId"/>
	<!--<fx:Binding source="areaid.selectedValue" destination="pm.condi.areaPathCode"/>-->
	<fx:Binding source="running_status.selectedValue" destination="pm.condi.runningStatus"/>
	<!--
	<fx:Binding source="serviceType.selectedValue" destination="pm.condi.serviceType"/>
	<fx:Binding source="layType.selectedValue" destination="pm.condi.layType"/>
	<fx:Binding source="isInterATM.selectedValue" destination="pm.condi.isInterATM"/>
	-->
	<fx:Binding source="noderType.selectedValue" destination="pm.condi.noderType"/>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.utils.ObjectUtil;
			
			import platform.common.manager.AlertHandler;
			import platform.common.manager.LanguageManager;
			import platform.common.manager.PopUpManager;
			import platform.common.vo.Page;
			import platform.constants.DataDirConsts;
			import platform.constants.LocaleConsts;
			import platform.dataDict.DataDictConfig;
			import platform.param.config.ParamConfig;
			import platform.term.config.NoderFileConfig;
			import platform.term.config.NoderInfoModuleConfig;
			import platform.term.constants.NoderConsts;
			import platform.term.constants.TermLocalKeyConsts;
			import platform.term.message.NoderInfoMsg;
			import platform.term.pm.NoderInfoModulePM;
			import platform.term.view.TermSelectForm;
			import platform.term.vo.NoderInfoVo;
			
			import sent.common.utils.DateUtils;
			import sent.rule.config.BlackRegulationConfig;
			import sent.rule.message.BlackRegulationMsg;
			import sent.rule.pm.BlackRegulationPM;
			import sent.rule.vo.BlackRegulationVO;

			
			/*========================================================*/
			/*   Property                                             */
			/*========================================================*/
			
			[Inject]
			[Bindable]
			public var pm:NoderInfoModulePM;
			
			[Inject]
			[Bindable]
			public var blackRegulationPM:BlackRegulationPM;
			
			[Bindable]
			private var isInterATMSource:IList;
			
			[Bindable]
			private var runningStatus:IList;
			
			//节点类型。0=地市server；1=标准版节点机；2=柜面节点机  3-节点机管理端
			[Bindable]
			private var noderTypes:IList;
			[Bindable]
			private var noderTypesFEdit:IList;
			
			private var langMgr:LanguageManager = LanguageManager.getInstance();
			
			/*========================================================*/
			/*   Function                                             */
			/*========================================================*/
			
			override protected function viewUpdateComplete():void
			{
				trace("NoderInfoModule.viewUpdateComplete");
				pm.init();
				privilegeBar.menuId = menu.id;
			}
			
			override protected function getDataDictCallback():void
			{
				isInterATMSource = bindableDataDirCache.getItemAt(0) as IList;
				runningStatus = bindableDataDirCache.getItemAt(1) as IList;
				noderTypes = bindableDataDirCache.getItemAt(2) as IList;
				noderTypesFEdit = ObjectUtil.clone(noderTypes) as IList;
				noderTypesFEdit.removeItemAt(0);
			}
			
			override public function dispose():void
			{
				trace("NoderInfoModule.dispose");
				noderInfoPageGrid.checkedItems = [];
				resetBtn.reset();
			}
			
			//Add 
			public function add():void
			{
				trace("NoderInfoModule.add");
				//set vo
				var vo:NoderInfoVo = new NoderInfoVo();
				vo.formType = TermLocalKeyConsts.ADD_TERMINFO_FORM;
				vo.noderType = "1";
				/* vo.machineType = NoderConsts.MACHINE_TYPE_NODER; */
				/* vo.activeDate = new Date(); */
				openWin(TermLocalKeyConsts.ADD_TERMINFO_FORM, vo);
			}
			
			/**
			 * edit datadir item
			 * */
			public function edit():void
			{
				trace("NoderInfoModule.edit");
				if (noderInfoPageGrid.checkedItems.length != 1)
				{
					AlertHandler.alert(LocaleConsts.NO_SELECTED_RECORD);
					return;
				}
				var temp:NoderInfoVo = NoderInfoVo(noderInfoPageGrid.checkedItems[0]);
				var vo:NoderInfoVo = temp as NoderInfoVo;
				vo.formType = TermLocalKeyConsts.UPDATE_TERMINFO_FORM;
				/* vo.machineType = NoderConsts.MACHINE_TYPE_NODER; */
				openWin(TermLocalKeyConsts.UPDATE_TERMINFO_FORM, vo);
				
			}
			
			/**
			 * delete datadir item
			 * */
			public function del():void
			{
				trace("NoderInfoModule.del");
				pm.delNoderInfo(noderInfoPageGrid.checkedItems);
			}
			
			
			//Add 
			public function importFile():void
			{
				trace("NoderInfoModule.importFile");
				//set vo
				var vo:NoderInfoVo = new NoderInfoVo();
				vo.formType = TermLocalKeyConsts.ADD_TERMINFO_FORM;
				/* vo.activeDate = new Date(); */
				//dispatch event
				var win:NoderInfoImportForm = new NoderInfoImportForm();
				
				//win.titleKey = TermLocalKeyConsts.UPDATE_TERMINFO_FORM;
				win.titleKey = "importNoderInfoForm";
				
				//加入到parsley上下文
				_context.viewManager.addViewRoot(win);
				PopUpManager.showForm4Parsley(IFlexDisplayObject(win), this);				
			}
			
			override protected function parsleyInit():void
			{
				trace("NoderInfoModule.parsleyInit");
				pm.menuId = menu.id;
			}
			
			/**
			 * dispatch event
			 * */
			public function openWin(p_winName:String, p_vo:NoderInfoVo):void
			{
				trace("NoderInfoModule.openWin");
				//dispatch event
				var win:NoderInfoForm = new NoderInfoForm();
				
				win.titleKey = p_winName;
				
				//加入到parsley上下文
				_context.viewManager.addViewRoot(win);
				PopUpManager.showForm4Parsley(IFlexDisplayObject(win), this);	
				
				win.pm.vo = p_vo;
				win.dataProvider = ObjectUtil.copy(pm.noderInfoFormInitDatas) as Object;
				win.pm.menuId = this.menu.id;	
				
				win.init();
			}
			
			/**
			 * 获取页结果集
			 */		
			[MessageHandler(selector="getNoderInfoPageResult")]
			public function getPageHandler(p_msg:NoderInfoMsg):void
			{
				trace("NoderInfoModule.getPageHandler - getNoderInfoPageResult1");
				orgId.getDataList();
				/* areaId.getDataList(); */


//				if(p_msg.result)
//					noderInfoPageGrid.checkedItems = [];
			}
			
			protected function noderInfoPageGrid_doubleClickHandler(event:MouseEvent):void
			{
				trace("NoderInfoModule.noderInfoPageGrid_doubleClickHandler");
				var vo:NoderInfoVo = NoderInfoVo(noderInfoPageGrid.selectedItem);
				vo.formType = TermLocalKeyConsts.READ_TERMINFO_FORM;
				var win:NoderInfoForm = new NoderInfoForm();
				win.readOnly = true;
				win.titleKey = TermLocalKeyConsts.READ_TERMINFO_FORM;
				
				//加入到parsley上下文
				_context.viewManager.addViewRoot(win);
				PopUpManager.showForm4Parsley(IFlexDisplayObject(win), this);				
				win.pm.vo = vo;
				win.pm.noderInfoFormInitDatas = ObjectUtil.copy(pm.noderInfoFormInitDatas);
				//				FormUtils.readOnlyForm(win.form);
				//				FormUtils.readOnlyForm(win.form2);
				win.saveButton.visible = false;
				win.saveButton.includeInLayout = false;
				win.init();
				/* win.resetButton.visible = false;
				win.resetButton.includeInLayout = false; */
			}
			
			
			//导出excel
			public function export():void
			{
				var arr:ArrayCollection = noderInfoPageGrid.dataProvider as ArrayCollection;
				var isPrintTemplate:int = arr.length ; 
						 
				pm.export(isPrintTemplate);
				// var langMgr:LanguageManager = LanguageManager.getInstance();
				//var msg:OrgMsg = new OrgMsg();
				// var termInfoMsg : TermInfoMsg = new TermInfoMsg;
				// termInfoMsg.type = "exportTermInfo";
				// termInfoMsg.args["orgId"] = String(pm.treeXml.@id);
				// msg.args["language"] = langMgr.currentLanguage;
				//sendMessage(termInfoMsg);
			}
			
			public function syncSendToSentServer():void
			{
				
				var msg:BlackRegulationMsg = new BlackRegulationMsg();
				msg.args["remoteMethod"]   = "syncSendToSentServer";
				msg.args["methodPrameter"] = 1;
				msg.args["resultHandler"]  = "NoderInfoModule.syncSendToSentServerResult";
				msg.args["errorHandler"]   = "NoderInfoModule.syncSendToSentServerError";
				
				blackRegulationPM.syncSendToSentServer(msg);
				
				
				//pm.syncSendToSentServer();
			}
			
			/**
			 * 
			 */
			[MessageHandler(selector="NoderInfoModule.syncSendToSentServerResult")]
			public function syncSendToSentServerResult(msg:BlackRegulationMsg):void
			{
				trace("ermInfoModule.syncSendToSentServerResult");
				var result:Object = msg.result;
				var returnResult:int=1;
				if(result != null){
					returnResult = ObjectUtil.copy(msg.result) as int;
					if(returnResult == 0){
						AlertHandler.alert("同步成功!");
					}else{
						AlertHandler.alert("同步失败!");
					}
				}
			}
			
			/**
			 * 
			 */
			[MessageHandler(selector="NoderInfoModule.syncSendToSentServerError")]
			public function syncSendToSentServerError(msg:BlackRegulationMsg):void
			{
				trace("NoderInfoModule.syncSendToSentServerError");
				trace(msg.result);
			}
			
			[MessageHandler(selector="exportOrgInfoResult")]
			public function exportOrgExcelResultHandler(termInfoMsg:NoderInfoMsg):void
			{
				if(termInfoMsg)
				{
					var fileName:String = termInfoMsg.result.toString();
					if(fileName=="noData")
					{
						var alertMsg:String = langMgr.getExceptionMessage("exceptionMessage.noDataToExport");
						AlertHandler.alert(alertMsg);
						return;
					}    
					else
					{
						//调用js打开连接下载
						ExternalInterface.call("downloadFile","../servlet/exportFileServlet?fileName=" + termInfoMsg.result.toString()); 
					}
				}
			}

			public function resetComboBox():void
			{
				
			}
			
			public function transformRunningStatus(p_item:Object, column:DataGridColumn):String
			{
				currentDataDictPath = NoderConsts.RUNNING_STATUS;
				return super.transferDataDict(p_item, column);
			}
			
			public function transformNoderType(p_item:Object, column:DataGridColumn):String
			{
				currentDataDictPath = NoderConsts.NODER_TYPE;
				return super.transferDataDict(p_item, column);
			}
			
			public function transformOperDate(p_item:Object, column:DataGridColumn):String
			{
				var date:Date = p_item.statusTime;
				if( date==null )
				{
					return null;
				}
				return DateUtils.formatDate(date);
			}
			
			public function managerFile():void
			{
				var noderInfoVo:NoderInfoVo = noderInfoPageGrid.selectedItem as  NoderInfoVo;
					
				var win:NoderFileSelectForm = new NoderFileSelectForm();
				
				var win2:NoderFileForm = new NoderFileForm();
				
				win.titleKey = "123123";
				
				//加入到parsley上下文
				_context.viewManager.addViewRoot(win);
//				_context.viewManager.addViewRoot(win2);
				
				PopUpManager.showForm4Parsley(IFlexDisplayObject(win), this);	
				
				win.pm.vo = noderInfoVo;
				win.module2 = this;
				win.pm.menuId = this.menu.id;	
				win.form2 = win2;
				
				win.init();
				
			}
		
		]]>
	</fx:Script>
	<s:BorderContainer width="100%" 
					   height="100%"
					   styleName="BorderContainer">
		<s:layout>
			<s:VerticalLayout gap="0" 
							  paddingTop="0"/>
		</s:layout>
		
		<!-- 查询条件 -->
		<grg:AdvancedSearchBar
			textAlign="center"
			styleName="SearchBar" borderVisible="false">
			<grg:layout>
				<s:VerticalLayout paddingTop="0" gap="0"/>
			</grg:layout>
			<mx:HBox width="100%" styleName="firHBoxStyle" paddingRight="0" height="30">
				<!--节点机信息-->
				<grg:TitleBar locale="titlemsg" width="50%"/>
				<mx:HBox height="30"  width="100%" styleName="senHBoxStyle" paddingTop="2" paddingBottom="3" horizontalAlign="right">
					<mx:HBox styleName="searchStyle" height="25">  
						<!--所属机构：-->
						<grg:Label locale="org"/>
						<grg:GRGComboBoxOrgTree id="orgid" defaultField="true"
												width="110" 
												textAlign="left"
												treeHeight="150"/> 

						<!-- 节点机类型 -->
						<grg:Label locale="noderType"/>
						<grg:ComboBox id="noderType" hasAllItem="true" selectedIndex="-1" allItemKey="runningStatusItem"
									  dataProvider="{noderTypes}"
									  labelField="text" valueField="key" width="100"/>
						
						<!--节点机IP：--> 
						<grg:Label locale="netAddrItem" />
						<grg:TextInput id="netAddr" textAlign="left" restrict="0-9\."
									   width="113" height="20"
									   styleName="TextInput" /> 
						<!--终端编号：
						<grg:Label locale="termCodeItem" />
						<grg:TextInput id="termCode" textAlign="left" restrict="0-9a-zA-Z\-"
									   width="114" height="20"
									   styleName="TextInput"/> 
						-->
						
						<grg:Label locale="runningStatusLabel"/>
						<grg:ComboBox id="running_status" hasAllItem="true" selectedIndex="-1" allItemKey="runningStatusItem"
									  dataProvider="{runningStatus}"
									  labelField="text" valueField="key" width="100"/>
						<grg:SearchButton id="btn_search"
										  locale="searchButton" menuId="{menu.id}" 
										  iconType="query" click="pm.page=new Page();pm.loadNoderInfoPage()"/>
					<!--	<grg:ExpansionButton locale ="moreSearch" iconType="pulldown"/> -->
						<grg:ResetButton id="resetBtn" iconType="reset" locale="resetButton" click="resetComboBox()" resetControls="{[netAddr,orgid/*,areaid,serviceType,layType,isInterATM*/]}"/>
					</mx:HBox>
				</mx:HBox>
			</mx:HBox> 
			
			<s:BorderContainer width="100%" borderVisible="false" backgroundAlpha="0">
				
				<s:layout>
					<s:VerticalLayout gap="0" paddingBottom="0" />
				</s:layout>
				
				<s:BorderContainer width="100%" height="4" backgroundImage="@Embed(source='resources/theme/newui/more_search.png')" borderVisible="false">
				</s:BorderContainer>
				
				<s:BorderContainer  width="100%" height="100%" backgroundColor="#FAFCFF" borderVisible="false">
					
					<s:layout>
						<s:VerticalLayout   gap="0" />
					</s:layout>
					
					<mx:HBox width="100%" styleName="expHBoxStyle">  
						<s:BorderContainer width="100%" height="28" styleName="expBorderHBoxStyle">
							
							<s:layout>
								<s:HorizontalLayout horizontalAlign="right" gap="2" verticalAlign="middle" />
							</s:layout>
							
							<!--所属区域：
							<grg:Label locale="areaIdItem"/>
							<grg:GRGComboxBoxAreaTree  id="areaid" valueField="@pathCode"
													   width="110"
													   textAlign="left"
													   treeHeight="150"/> 
							-->
							<!--
							<grg:ComboBox id="serviceType" name="serviceType" selectedIndex="-1"
										  dataProvider="{pm.searchBarInitDatas.serviceTypeList}" 
										  labelField="value" valueField="key"
										  width="110" textAlign="left" hasAllItem="true" allItemKey="serviceTypeItem"
										  />
							<grg:ComboBox id="layType" name="layType"  selectedIndex="-1"
										  dataProvider="{pm.searchBarInitDatas.layTypeList}" 
										  labelField="value" valueField="key"
										  width="110" textAlign="left" hasAllItem="true" allItemKey="layTypeItem"
										  /> 
							<grg:ComboBox id="isInterATM" name="isInterATM"  selectedIndex="-1"
										  dataProvider="{isInterATMSource}"
										  labelField="text" valueField="key"
										  width="110" textAlign="left" hasAllItem="true" allItemKey="isInterATMItem"
										  />
							-->
							
						</s:BorderContainer>
					</mx:HBox>
				</s:BorderContainer>
				
				<s:BorderContainer width="100%" height="1" backgroundColor="#E0E1E4" borderVisible="false">
				</s:BorderContainer>
				
			</s:BorderContainer>
			
		</grg:AdvancedSearchBar>
		
		<!-- 操作按钮 -->
		<mx:HBox width="100%" styleName="moduleButtonBarHBoxstyle">
			<s:BorderContainer styleName="moduleButtonBarstyle" height="25">
				<s:layout>
					<s:HorizontalLayout paddingLeft="4" paddingTop="2"/>
				</s:layout>
				<grg:GRGModuleButtonBar id="privilegeBar" barType="button" menuId="{menu.id}" styleName="moduleButtonBarstyle"/>
				<grg:Button locale="fileExport" iconType="export" click="export();"  />
				<!--导入-->
				<grg:Button locale="fileupload" iconType="import" click="importFile();" />
	
			</s:BorderContainer>
		</mx:HBox> 
		
		<!-- 列表 -->
			<grg:DataGrid id="noderInfoPageGrid" dataProvider="{pm.page.result}" 
									   width="100%" height="100%" textAlign="left"
									   paddingLeft="20" 
									   styleName="DataGrid" >
				<grg:columns>
					<grg:CheckBoxColumn id="checkBoxCol"
										sortable="false"
										draggable="false"
										editable="false"
										resizable="false" 
										textAlign="center"
										/>
					<!--终端编号：
					<grg:DataGridColumn locale="termCodeItem"
										dataField="termCode" 
										textAlign="left"
										/>
					-->
					<!--所属机构：-->
					<grg:RODataGridColumn locale="org"
										  dataField="orgName"
										  id="orgId"
										  labelField="orgName"
										  valueField="orgName"
										  service="orgInfoService"
										  method="getAllOrg" 
										  textAlign="left"
										  />
					<!-- 版本号 -->
					<grg:DataGridColumn locale="noderVersion" dataField="version" textAlign="left" />
					
					<!--节点机类型：-->
					<grg:DataGridColumn locale="noderType"
										dataField="noderType" 
										textAlign="left"
										labelFunction="{transformNoderType}"/>
					
					<!--节点机IP：-->
					<grg:DataGridColumn locale="noderIP"
										dataField="noderIP" 
										textAlign="left"
										/>

					<!--所属区域：
					<grg:RODataGridColumn locale="areaIdItem"
										  dataField="areaId"
										  id="areaId"
										  labelField="areaName"
										  valueField="id"
										  service="areaService"
										  method="getAllArea" 
										  textAlign="left"
										  />
					-->
					<!--运行状态：-->
					<grg:DataGridColumn locale="runningStatus"
										dataField="runningStatus" 
										textAlign="left"
										labelFunction="{transformRunningStatus}"
										>
					<grg:itemRenderer>
						<fx:Component>
							<s:MXItemRenderer>
								<fx:Script>
									<![CDATA[
										[Bindable]
										private var registerInDoubtRecord:Boolean;
										[Bindable]
										private var runningStatus:String;
										override public function set data(value:Object):void
										{
											super.data = value;
											runningStatus = data.runningStatus;
											if(runningStatus == '1'){
												runningStatus = '故障';
												runningStatusColor.setStyle("color","#ff0000");
											} else if(runningStatus == '2'){
												runningStatus = '离线';
												runningStatusColor.setStyle("color","#ff0000");
											}else if(runningStatus == '0'){
												runningStatus = '正常';
												runningStatusColor.setStyle("color","black");
											}
										}
									]]>
								</fx:Script>
								<grg:Label text="{runningStatus}" paddingTop="5" paddingLeft="3" id="runningStatusColor"  />
							</s:MXItemRenderer>
						</fx:Component>
					</grg:itemRenderer>
					</grg:DataGridColumn>
					
					<!--状态更新时间：-->
					<grg:DataGridColumn locale="statusTime"
										dataField="statusTime" 
										textAlign="left"
										labelFunction="{transformOperDate}"
										/>
					
					<!--参数：-->
					<grg:DataGridColumn locale="parameter"
										dataField="parameter" 
										textAlign="left"
										/>
					<!--设备信息：-->
					<grg:DataGridColumn locale="device"
										dataField="device" 
										textAlign="left"
										/>
					
					<!-- 中间层IP  -->
					<grg:DataGridColumn locale="midLevelIP"
										dataField="midLevelIP" 
										textAlign="left"
										/>
					
					<!-- 节点机安装目录  -->
					<grg:DataGridColumn locale="installDir"
										dataField="installDir" 
										textAlign="left"
										/>
					<grg:DataGridColumn locale="fileFLogConfig"
										textAlign="left"
										>
						<grg:itemRenderer>
							<fx:Component>
								<s:MXDataGridItemRenderer>
									<grg:GRGModuleButtonBar2 width="100%" height="16" align="center" >
										<grg:Button locale="fileFLogConfig" click="outerDocument.managerFile();" />
									</grg:GRGModuleButtonBar2>
								</s:MXDataGridItemRenderer>
							</fx:Component>
						</grg:itemRenderer>
					</grg:DataGridColumn>
					
				</grg:columns>
			</grg:DataGrid>
		<grg:PageNavigatorBar id="noderInfoPagingBar"
							  x="0" pageVo="{pm.page}"
							  pagingFunction="{pm.loadNoderInfoPage}"
							  bottom="0" />
	</s:BorderContainer>
</grg:TabModule>
