<?xml version="1.0" encoding="utf-8"?>
<grg:TabModule xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				xmlns:grg="http://grg.grgbanking.com/platform/" 
				xmlns:parsley="http://www.spicefactory.org/parsley"
				dataDictionaryPaths="{[	TransInfoConsts.NOTE_FLAG,
										TransInfoConsts.NOTE_TYPE,
										CmlSentInfoConsts.NOTE_TYPE,
										CmlSentInfoConsts.CURRENCY,
										CmlSentInfoConsts.VERSION_NUM,
										CmlSentInfoConsts.TERM_TYPE,
										CmlSentInfoConsts.MACHINE_TYPE,
										CmlSentInfoConsts.CASH_TYPE]}"
				locale="transBankNoteSeqAllModule"  
				layout="vertical" 
				xmlns:userDefined="platform.date.*"
				width="100%" height="100%"
				>
	
	<fx:Declarations>
		<parsley:ContextBuilder>
			<parsley:ViewSettings autoremoveViewRoots="false"/>
			<parsley:Scope name="TransBankNoteSeqAllModule"/> 
			<parsley:MessageSettings defaultReceiverScope="TransBankNoteSeqAllModule"/>
			<parsley:FlexConfig type="{TransBankNoteSeqAllConfig}"/>
			<parsley:FlexConfig type="{AtmTranInfoConfig}"/>
			<parsley:FlexConfig type="{CmlSentInfoConfig}"/>
			<parsley:FlexConfig type="{CmlTaskInfoConfig}"/>
			<parsley:FlexConfig type="{CmlImprecordsConfig}"/>
			<parsley:FlexConfig type="{CmlBatchRecordConfig}"/>
			<parsley:FlexConfig type="{CmlLoadNotesRecordConfig}"/>
			<parsley:FlexConfig type="{CmlCounterRecordConfig}"/>
			<parsley:FlexConfig type="{CmlNoteflowInfoConfig}"/>
			<parsley:FlexConfig type="{CmlNoteflowDetailInfoConfig}"/>
			<parsley:FlexConfig type="{DataDictConfig}"/>
		</parsley:ContextBuilder>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import org.idmedia.as3commons.util.StringUtils;
			
			import platform.common.manager.AlertHandler;
			import platform.common.manager.LanguageManager;
			import platform.common.manager.PopUpManager;
			import platform.common.vo.Page;
			import platform.dataDict.DataDictConfig;
			
			import sent.common.utils.DataGridColumnUtils;
			import sent.common.utils.DateUtils;
			import sent.transmgr.config.AtmTranInfoConfig;
			import sent.transmgr.config.CmlBatchRecordConfig;
			import sent.transmgr.config.CmlCounterRecordConfig;
			import sent.transmgr.config.CmlImprecordsConfig;
			import sent.transmgr.config.CmlLoadNotesRecordConfig;
			import sent.transmgr.config.CmlNoteflowDetailInfoConfig;
			import sent.transmgr.config.CmlNoteflowInfoConfig;
			import sent.transmgr.config.CmlSentInfoConfig;
			import sent.transmgr.config.CmlTaskInfoConfig;
			import sent.transmgr.config.TransBankNoteSeqAllConfig;
			import sent.transmgr.constants.CmlSentInfoConsts;
			import sent.transmgr.constants.TransInfoConsts;
			import sent.transmgr.message.CmlNoteflowInfoMsg;
			import sent.transmgr.message.CmlSentInfoMsg;
			import sent.transmgr.message.TransBankNoteSeqAllMsg;
			import sent.transmgr.pm.CmlNoteflowInfoPM;
			import sent.transmgr.pm.CmlSentInfoPM;
			import sent.transmgr.pm.TransBankNoteSeqAllPM;
			import sent.transmgr.vo.CmlNoteflowInfoVO;
			import sent.transmgr.vo.CmlSentInfoVO;
			
			//====================
			/** 冠字号码全程追踪 **/
			//====================
			
			private var langMgr:LanguageManager = LanguageManager.getInstance();
			
			
			[Inject]
			[Bindable]
			public var transBankNoteSeqAllPM:TransBankNoteSeqAllPM;
			
			[Inject]
			[Bindable]
			public var cmlSentInfoPM:CmlSentInfoPM;
			
			
			[Inject]
			[Bindable]
			public var cmlNoteflowInfoPM:CmlNoteflowInfoPM;
			
			[Bindable]
			private var termTypeAC:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var page:Page = new Page();
			
			[Bindable]
			public var cmlSentInfoPage:Page = new Page();
			
			
			[Bindable]
			public var sourceAll:ArrayCollection;
			override protected function transferDataDict(p_item:Object, column:DataGridColumn):String
			{
				if(column.dataField == "noteFlag")
					currentDataDictPath =TransInfoConsts.NOTE_FLAG;
				else if(column.dataField == "noteType")
					currentDataDictPath = TransInfoConsts.NOTE_TYPE;
				else if(column.dataField == "currency")//币种
					currentDataDictPath = CmlSentInfoConsts.CURRENCY;
				else if(column.dataField =="versionNum")
					currentDataDictPath = CmlSentInfoConsts.VERSION_NUM;
				else if(column.dataField == "termType")
					currentDataDictPath = CmlSentInfoConsts.TERM_TYPE;
				else if(column.dataField == "machineType") 
					currentDataDictPath = CmlSentInfoConsts.MACHINE_TYPE ;
				else if(column.dataField == "moneyType") 
					currentDataDictPath = CmlSentInfoConsts.CASH_TYPE ;
				return super.transferDataDict(p_item, column);
			}
			
			/**
			 * 获取页结果集
			 */		
			override protected function viewUpdateComplete():void
			{
				trace("TransBankNoteSeqAllModule.viewUpdateComplete");
				//transBankNoteSeqAllPM.transBankNoteSeqAllVO = new CmlSentInfoVO();
			}
			
			override protected function getDataDictCallback():void
			{
				trace("TransBankNoteSeqAllModule.getDataDictCallback");
				
				//向下拉列表框中添加一个"全部"子项
				var str:String  = LanguageManager.getInstance().getCommonLanguageMap("components")["all"] as String ;
				var allItem:Object = {key:"", text:str};
				
				var arrCol:ArrayCollection = ObjectUtil.copy(dataDictionaryCache[TransInfoConsts.NOTE_TYPE]) as ArrayCollection;
				arrCol.addItemAt(allItem, 0);
				sourceAll = arrCol;
				
				
				termTypeAC.removeAll();
				termTypeAC.addItem(allItem);
				termTypeAC.addAll(ObjectUtil.copy(dataDictionaryCache[CmlSentInfoConsts.TERM_TYPE]) as ArrayCollection);
//				termType.selectedIndex = -1;
				
				//刷新列表
				//(noteType.dataProvider as ListCollectionView).refresh();
				
			}
			
			protected function checkQueryCondition():Boolean
			{
				trace("TransBankNoteSeqAllModule.checkQueryCondition");
				if( this.startTime.selectedDate==null )
				{
					AlertHandler.alert(LanguageManager.getInstance().getExceptionMessage("exceptionMessage.startTimeCannotBeNull"));
					return false;
				}
				if( this.endTime.selectedDate==null )
				{
					AlertHandler.alert(LanguageManager.getInstance().getExceptionMessage("exceptionMessage.endTimeCannotBeNull"));
					return false;
				}
				if( this.startTime.selectedDate.time > this.endTime.selectedDate.time )
				{
					AlertHandler.alert(LanguageManager.getInstance().getExceptionMessage("exceptionMessage.startTimeCannotBeGreaterThanEndTime"));
					return false;
				}
				/*if( this.seriaNo.text!="" && StringUtil.trim(this.seriaNo.text).length<10)
				{
					if(StringUtil.trim(this.termId.text)==""){
						AlertHandler.alert(LanguageManager.getInstance().getExceptionMessage("exceptionMessage.pleaseInputSeriaNo"));
						return false;
					}
//					if(this.endTime.selectedDate.time != this.startTime.selectedDate.time){
//						AlertHandler.alert(LanguageManager.getInstance().getExceptionMessage("exceptionMessage.checkInputTime"));
//						return false;
//					}
				}*/
				return true;
			}
			
			public function loadPage():void
			{
				trace("TransBankNoteSeqAllModule.loadPage");
				try
				{
					if( checkQueryCondition()==false )
					{
						return ;
					}
					
					var parameter:Object = {};
					
					page.result.removeAll();
					if(lbl_outOfResultRangeTips){
						lbl_outOfResultRangeTips.text = "";
					}
					parameter["page"] = page;
					
					var condition:Object = {};
					condition.pathCode = String(orgId.selectedItem.@pathCode);
					condition.flag=isLoopOrg.selected.toString();
					condition.startTime = startTime.text;
					condition.endTime = endTime.text;
					if( this.seriaNo.text!="" && StringUtil.trim(this.seriaNo.text).length<10)
					{
					condition.seriaNo = "%" + seriaNo.text;
					condition.isFuzzyQuery = "true";
					}else{
						condition.seriaNo = seriaNo.text;
					}
					condition.termId = termId.text;
					condition.noteType = noteType.selectedValue;				
					parameter["condition"] = condition;
					
					
					var msg:CmlSentInfoMsg = new CmlSentInfoMsg();
					msg.args["remoteMethod"]   = "getCmlSentInfoForPage";
					msg.args["methodPrameter"] = parameter;
					msg.args["resultHandler"]  = "TransBankNoteSeqAllModule.getCmlSentInfoPageResult";
					msg.args["errorHandler"]   = "TransBankNoteSeqAllModule.getCmlSentInfoPageError";
					cmlSentInfoPM.sendCmlSentInfoMsg(msg);
				}
				catch(e:Error)
				{
					trace(e);
				}
			}
			
			[MessageHandler(selector="TransBankNoteSeqAllModule.getCmlSentInfoPageResult")]
			public function getCmlSentInfoPageResult(p_msg:CmlSentInfoMsg):void
			{
				trace("TransBankNoteSeqAllModule.getCmlSentInfoPageResult");
				if(p_msg.result)
				{
					page = p_msg.result as Page;
					
					//提供具体的冠字号码查询没有记录,弹出提示
					if(page.totalCount == 0){
						AlertHandler.alert(LanguageManager.getInstance().getExceptionMessage("exceptionMessage.seriaNoNotExisted"));
					}else{
						checkResultIsOutOfRange(page.totalCount);
					}
				}
			}
			
			
			public function checkResultIsOutOfRange(totalCount:int):void
			{
				trace("TransBankNoteSeqAllModule.checkResultIsOutOfRange");
				try
				{
					
					var parameter:Object = {};
					var condition:Object = {};
					condition.totalCount = totalCount;
					parameter["condition"] = condition;
					
					var msg:CmlSentInfoMsg = new CmlSentInfoMsg();
					msg.args["remoteMethod"]   = "checkResultIsOutOfRange";
					msg.args["methodPrameter"] = parameter;
					msg.args["resultHandler"]  = "TransBankNoteSeqAllModule.checkResultIsOutOfRangeResult";
					msg.args["errorHandler"]   = "TransBankNoteSeqAllModule.checkResultIsOutOfRangeError";
					cmlSentInfoPM.sendCmlSentInfoMsg(msg);
				}
				catch(e:Error)
				{
					trace(e);
				}
			}
			
			[MessageHandler(selector="TransBankNoteSeqAllModule.checkResultIsOutOfRangeResult")]
			public function checkResultIsOutOfRangeResult(p_msg:CmlSentInfoMsg):void
			{
				trace("TransBankNoteSeqAllModule.checkResultIsOutOfRangeResult");
				if(p_msg.result)
				{
					var outOfResultRangeTips:String = p_msg.result as String;
					
					lbl_outOfResultRangeTips.text = outOfResultRangeTips;				
				}
			}
			
			//////////
			
			/**
			 * 
			 */
			public function expCSV():void
			{
				trace("TransBankNoteSeqAllModule.export");
				try
				{
					if( checkQueryCondition()==false )
					{
						return ;
					}
					
					if(page.result.length ==0){
						AlertHandler.alert("页面没有数据需要进行导出");
						return;
					}
					
					var condition:Object = {};
					condition.pathCode  = String(orgId.selectedItem.@pathCode);
					condition.startTime = startTime.text;
					condition.endTime   = endTime.text;
					if( this.seriaNo.text!="" && StringUtil.trim(this.seriaNo.text).length<10)
					{
						condition.seriaNo = "%" + seriaNo.text;
						condition.isFuzzyQuery = "true";
					}else{
						condition.seriaNo = seriaNo.text;
					}
					condition.termId    = termId.text;
					condition.noteType  = noteType.selectedValue;				
					
					var msg:CmlSentInfoMsg = new CmlSentInfoMsg();
					msg.args["remoteMethod"]   = "expCmlSentInfoCSV";
					msg.args["methodPrameter"] = condition;
					msg.args["resultHandler"]  = "TransBankNoteSeqAllModule.expCmlSentInfoCSVResult";
					msg.args["errorHandler"]   = "TransBankNoteSeqAllModule.expCmlSentInfoCSVError";
					cmlSentInfoPM.sendCmlSentInfoMsg(msg);
				}
				catch(e:Error)
				{
					trace(e);
				}
			}
			
			/**
			 * CSV导出数据 成功处理回调方法
			 */
			[MessageHandler(selector="TransBankNoteSeqAllModule.expCmlSentInfoCSVResult")]
			public function expCmlSentInfoCSVResult(p_msg:CmlSentInfoMsg):void
			{
				trace("TransBankNoteSeqAllModule.exportSentInfoResult");
				if(p_msg)
				{
					var fileName:String = p_msg.result.toString();
					if(fileName=="noData")
					{
						var alertMsg:String = langMgr.getExceptionMessage("exceptionMessage.noDataToExport");
						AlertHandler.alert(alertMsg);
						return;
					}    
					else
					{
						//调用js打开连接下载
						ExternalInterface.call("downloadFile",".ImportExcelServlet?fileName=" + fileName);
					}
				}
			}
			
			////////////////
			
			/**
			 * 
			 */
			public function expFSN():void
			{
				trace("TransBankNoteSeqAllModule.expFSN");
				
				if( checkQueryCondition()==false ){
					return ;
				}
				
				if(page.result.length ==0){
					AlertHandler.alert("页面没有数据需要进行导出");
					return;
				}
				
				var condition:Object = {};
				condition.pathCode  = String(orgId.selectedItem.@pathCode);
				condition.startTime = startTime.text;
				condition.endTime   = endTime.text;
				if( this.seriaNo.text!="" && StringUtil.trim(this.seriaNo.text).length<10)
				{
					condition.seriaNo = "%" + seriaNo.text;
					condition.isFuzzyQuery = "true";
				}else{
					condition.seriaNo = seriaNo.text;
				}
				condition.termId    = termId.text;
				condition.noteType  = noteType.selectedValue;				
				
				var msg:CmlSentInfoMsg = new CmlSentInfoMsg();
				msg.args["remoteMethod"]   = "expCmlSentInfoFSN";
				msg.args["methodPrameter"] = condition;
				msg.args["resultHandler"]  = "TransBankNoteSeqAllModule.expCmlSentInfoFSNResult";
				msg.args["errorHandler"]   = "TransBankNoteSeqAllModule.expCmlSentInfoFSNError";
				cmlSentInfoPM.sendCmlSentInfoMsg(msg);
			}
			
			[MessageHandler(selector="TransBankNoteSeqAllModule.expCmlSentInfoFSNResult")]
			public function expCmlSentInfoFSNResult(p_msg:CmlSentInfoMsg):void
			{
				trace("TransBankNoteSeqAllModule.expCmlSentInfoFSNResult");
				if(p_msg)
				{
					var fileName:String = p_msg.result.toString();
					if(fileName=="noData")
					{
						var alertMsg:String = langMgr.getExceptionMessage("exceptionMessage.noDataToExport");
						AlertHandler.alert(alertMsg);
						return;
					}    
					else
					{
						//调用js打开连接下载
						ExternalInterface.call("downloadFile",".ImportExcelServlet?fileName=" + fileName);
					}
				}
			}
			
			////////////
			
			/**
			 * 显示详细的交易信息
			 */
			public function showTransDetailInfo():void
			{
				trace("TransBankNoteSeqAllModule.showTransDetailInfo");
				var obj:CmlSentInfoVO = transBanknoteSeqGrid.selectedItem as CmlSentInfoVO;
				if( obj.termType=="0" )
				{	// 清分交易
					var viewCmlTaskSeqForm:ViewCmlTaskSeqForm = new ViewCmlTaskSeqForm();
					
					_context.viewManager.addViewRoot(viewCmlTaskSeqForm);
					PopUpManager.showForm4Parsley(viewCmlTaskSeqForm);
					
					viewCmlTaskSeqForm.initData(obj.id, obj.fromTableName);
				}
				
				else if( obj.termType=="1" )	//ATM冠字号检索
				{	// ATM
					var viewAtmTranSeqForm:ViewAtmTranSeqForm = new ViewAtmTranSeqForm();
					
					_context.viewManager.addViewRoot(viewAtmTranSeqForm);
					PopUpManager.showForm4Parsley(viewAtmTranSeqForm);
					
					viewAtmTranSeqForm.initData(obj.id, obj.fromTableName);
				}
				else if( obj.termType=="2" )
				{	// fsn文件手动上传
					var viewImpRecordSeqForm:ViewImpRecordSeqForm = new ViewImpRecordSeqForm();
					
					_context.viewManager.addViewRoot(viewImpRecordSeqForm);
					PopUpManager.showForm4Parsley(viewImpRecordSeqForm);
					
					viewImpRecordSeqForm.initData(obj.id, obj.fromTableName);
				}
//				else if( obj.termType=="3" )
//				{	// 批次
//					var viewBatchSeqForm:ViewBatchSeqForm = new ViewBatchSeqForm();
//					
//					_context.viewManager.addViewRoot(viewBatchSeqForm);
//					PopUpManager.showForm4Parsley(viewBatchSeqForm);
//					
//					viewBatchSeqForm.initData(obj.id);
//				}
				else if( obj.termType=="4" )
				{	// 加钞交易
					var viewLoadNotesRecordSeqForm:ViewLoadNotesRecordSeqForm = new ViewLoadNotesRecordSeqForm();
					
					_context.viewManager.addViewRoot(viewLoadNotesRecordSeqForm);
					PopUpManager.showForm4Parsley(viewLoadNotesRecordSeqForm);
					
					viewLoadNotesRecordSeqForm.initData(obj.id, obj.fromTableName);
				}
				else if( obj.termType=="5" )
				{	// 柜台交易
					var viewCounterRecordSeqForm:ViewCounterRecordSeqForm = new ViewCounterRecordSeqForm();
					
					_context.viewManager.addViewRoot(viewCounterRecordSeqForm);
					PopUpManager.showForm4Parsley(viewCounterRecordSeqForm);
					
					viewCounterRecordSeqForm.initData(obj.id, obj.fromTableName);
				}
			}
			
//			/**
//			 * 获取该交易的所有冠字号码信息
//			 */
//			[MessageHandler(selector="getTransAllBanknoteSeqByTranIdResult")]
//			public function getTransSEQListResult(p_msg:TransBankNoteSeqAllMsg):void
//			{
//				trace("TransBankNoteSeqAllModule.getTransSEQListResult - getTransAllBanknoteSeqByTranIdResult");
//				if( p_msg.result )
//				{
//					transBankNoteSeqAllPM.atmTransPage=p_msg.result as Page;
//				}
//			}
			
			// 按钮响应函数
			public function viewNoteflowDetailInfo():void
			{
				trace("TransBankNoteSeqAllModule.viewNoteflowDetailInfo");
				var obj:CmlSentInfoVO = transBanknoteSeqGrid.selectedItem as CmlSentInfoVO;
				if( StringUtils.isBlank(obj.barcodeFlowNum) )
				{
					var alertMsg:String = langMgr.getExceptionMessage("exceptionMessage.flowNumIsBlank");
					AlertHandler.alert(alertMsg);
					return ;
				}
				
				//打开子窗口
				var win:ShowCmlNoteflowInfo = new ShowCmlNoteflowInfo();
				
				_context.viewManager.addViewRoot(win);
				PopUpManager.showForm4Parsley(win);
				
				win.initData(obj.barcodeFlowNum);
				
			}
			
			// 冠字号追踪详情
			public function viewTailDetailInfo():void
			{
				var obj:CmlSentInfoVO = transBanknoteSeqGrid.selectedItem as CmlSentInfoVO;
				/* if( StringUtils.isBlank(obj.barcodeFlowNum) )
				{
					var alertMsg:String = langMgr.getExceptionMessage("exceptionMessage.flowNumIsBlank");
					AlertHandler.alert(alertMsg);
					return ;
				} */
				
				//打开子窗口
				var win:ShowTailDetailInfo = new ShowTailDetailInfo();
				
				_context.viewManager.addViewRoot(win);
				PopUpManager.showForm4Parsley(win);
				
				var queryCon:Object = new Object();
				queryCon.seriaNo = obj.seriaNo;
				queryCon.orgSelectedIndex = orgId.selectedIndex;
				queryCon.selectedItem = orgId.selectedItem;
				queryCon.startTime = startTime.text;
				queryCon.endTime = endTime.text;
				win.initData(obj.id, obj.fromTableName, obj.barcodeFlowNum,queryCon);
				
			}
			
			private function createRowNo(oItem:Object,iCol:int):String{
				var iIndex:int = ((page.pageNo - 1) * page.pageSize) + page.result.getItemIndex(oItem) + 1;
				return String(iIndex);
			}
			
			public function initSelectDate():void
			{
				startTime.selectedDate = DateUtils.createDate(-7);
				endTime.selectedDate = DateUtils.createDate(0);
			}
		]]>
	</fx:Script>
	
	<!--
	<fx:Binding source="startTime.selectedDate" destination="transBankNoteSeqAllPM.condi.startTime"/>
	<fx:Binding source="endTime.selectedDate"   destination="transBankNoteSeqAllPM.condi.endTime"/>
	<fx:Binding source="termId.text"            destination="transBankNoteSeqAllPM.transBankNoteSeqAllVO.termid"/>
	<fx:Binding source="seriaNo.text"           destination="transBankNoteSeqAllPM.transBankNoteSeqAllVO.seriaNo"/>
	<fx:Binding source="noteType.selectedValue" destination="transBankNoteSeqAllPM.transBankNoteSeqAllVO.noteType" />
	<fx:Binding source="orgId.selectedValue"    destination="transBankNoteSeqAllPM.transBankNoteSeqAllVO.pathcode"/>
	-->
	
	<s:BorderContainer width="100%" height="100%" styleName="BorderContainer">
		
		<s:layout>
			<s:VerticalLayout gap="0" paddingTop="0"/>
		</s:layout>
		
		<!-- 查询条件 -->
		<grg:AdvancedSearchBar textAlign="center" styleName="SearchBar" borderVisible="false">
			
			<grg:layout>
				<s:VerticalLayout paddingTop="0" gap="0"/>
			</grg:layout>
			
			<mx:HBox width="100%" styleName="firHBoxStyle" paddingRight="0" height="30">
				<!--冠字号码全程追踪-->
				<grg:TitleBar locale="titlemsg" width="50%"/>
				<mx:HBox height="30"  width="100%" styleName="senHBoxStyle" paddingTop="2" paddingBottom="3" horizontalAlign="right">
					<mx:HBox styleName="searchStyle" height="25">
						
						<!--是否循环遍历子机构：-->
						<grg:CheckBox id="isLoopOrg" selected="true">
						</grg:CheckBox>
						
						<!-- 所属机构： -->
						<grg:Label locale="orgIdColon"/>
						<grg:GRGComboBoxOrgTree id="orgId" defaultField="true" width="100" textAlign="left" treeHeight="300" />	
						<s:Spacer width="5" />
						
						<!-- 冠字号码： -->
						<grg:Label locale="seriaNoColon" />
						<grg:TextInput id="seriaNo" textAlign="left" restrict="0-9A-Za-z"
									   width="100" height="20" maxChars="10" maxnum="10"
									   styleName="TextInput" />
						<s:Spacer width="5" />
						
						<!--交易时间：-->
						<grg:Label locale="tranTimeColon" />
						<userDefined:SuperDateField id="startTime"  myEnabled="false" 
											selectedDate="{DateUtils.createDate(-7)}"
											selectableRange="{{rangeEnd:endTime.selectedDate}}" />
						<grg:Label locale="to"/>
						<userDefined:SuperDateField id="endTime"  myEnabled="false" 
											selectedDate="{DateUtils.createDate(0)}"
											selectableRange="{{rangeStart:startTime.selectedDate}}" />
						<s:Spacer width="5" />
						
						
						<grg:SearchButton id="btn_search" locale="searchButton" menuId="{menu.id}" iconType="query" click="page.pageNo=1;loadPage()"/>
						<grg:ExpansionButton locale="moreSearch" iconType="pulldown"/> 					
						<grg:ResetButton id="resetBtn" locale="resetButton" iconType="reset"
										 resetControls="{[noteType, orgId, termId, seriaNo]}" click="initSelectDate()"/>
					</mx:HBox>
				</mx:HBox>
			</mx:HBox> 
			
			<s:BorderContainer width="100%" borderVisible="false" backgroundAlpha="0">
				
				<s:layout>
					<s:VerticalLayout gap="0" paddingBottom="0" />
				</s:layout>
				
				<s:BorderContainer width="100%" height="4" backgroundImage="@Embed(source='resources/theme/newui/more_search.png')" borderVisible="false">
				</s:BorderContainer>
				
				<s:BorderContainer  width="100%" height="100%" backgroundColor="#FAFCFF" borderVisible="false">
					
					<s:layout>
						<s:VerticalLayout   gap="0" />
					</s:layout>
					
					<mx:HBox width="100%" styleName="expHBoxStyle">  
						
						<s:BorderContainer width="100%" height="28" styleName="expBorderHBoxStyle">
							
							<s:layout>
								<s:HorizontalLayout horizontalAlign="right" gap="2" verticalAlign="middle" />
							</s:layout>
							
							<!--终端编号：-->
							<grg:Label locale="termIdColon" />
							<grg:TextInput id="termId" textAlign="left" restrict="0-9a-zA-Z\-"
										   width="90" height="20" styleName="TextInput" />
							<s:Spacer width="5" />
							
							<!-- 钞票类别： -->
							<grg:Label locale="noteTypeColon" />
							<grg:ComboBox id="noteType" dataProvider="{sourceAll}" width="120"
										  textAlign="left" valueField="key" labelField="text" 
										  requireSelection="true"/>
							<s:Spacer width="5" />
							
						</s:BorderContainer>
					</mx:HBox>
				</s:BorderContainer>
				
			</s:BorderContainer>
		</grg:AdvancedSearchBar>
		
		<mx:HBox width="100%" styleName="moduleButtonBarHBoxstyle" horizontalAlign="left">
			<s:BorderContainer styleName="moduleButtonBarstyle" height="25" backgroundColor="#ffffff">
				<s:layout>
					<s:HorizontalLayout paddingLeft="4" paddingTop="2" horizontalAlign="right"/>
				</s:layout>	
				
				<grg:GRGModuleButtonBar2 id="privilegeBar2"  menuId="{menu.id}">
					<!--CSV文件导出-->
					<grg:Button locale="expCSV" id="expCSV1" privilegeCode="expCSV" click="expCSV()"
								icon="@Embed('resources/theme/images/icons/output.png')"/>
					<!--FSN文件导出-->
					<grg:Button locale="fsnZip" id="expFSN1" privilegeCode="expFSN" click="expFSN()"
								icon="@Embed('resources/theme/images/icons/output.png')"/>
				</grg:GRGModuleButtonBar2>			
			</s:BorderContainer>
		</mx:HBox>
		
		<!--列表-->
		<grg:DataGrid id="transBanknoteSeqGrid" dataProvider="{page.result}"
					  width="100%" height="100%"
					  textAlign="center" 
					  styleName="DataGrid"
					  borderVisible="true">
			<grg:columns>
				<!-- 序号 -->
				<grg:DataGridColumn locale="columnNo"  textAlign="center" labelFunction="createRowNo" sortable="false" width="50"/>
				<!--冠字号码：-->
				<grg:DataGridColumn locale="seriaNo" dataField="seriaNo" textAlign="center">
					<grg:itemRenderer>
						<fx:Component>
							<s:MXItemRenderer>
								<fx:Script>
									<![CDATA[
										[Bindable]
										private var registerInDoubtRecord:Boolean;
										[Bindable]
										private var seriaNo:String;
										override public function set data(value:Object):void
										{
											super.data = value;
											seriaNo = data.seriaNo;
											registerInDoubtRecord = data.registerInDoubtRecord;
											if(registerInDoubtRecord){
												seriaNoColor.setStyle("color","#ff0000");
												seriaNoColor.toolTip = "在涉假信息中有登记";
											} else {
												seriaNoColor.setStyle("color","black");
											}
										}
									]]>
								</fx:Script>
								<grg:Label text="{seriaNo}" paddingTop="5" paddingLeft="5" id="seriaNoColor" verticalCenter="-5" />
							</s:MXItemRenderer>
						</fx:Component>
					</grg:itemRenderer>
				</grg:DataGridColumn>
				<!--钞票类别-->
				<grg:DataGridColumn locale="noteType" dataField="noteType" labelFunction="{transferDataDict}" />
				<!--币种-->
				<grg:DataGridColumn locale="currency" dataField="currency" labelFunction="{transferDataDict}"/>
				<!--面额-->
				<grg:DataGridColumn locale="denomination" dataField="denomination" />
				<!--终端编号：-->
				<grg:DataGridColumn locale="termid" dataField="termId"/>
				<!--  机型   -->
				<grg:DataGridColumn locale="type" dataField="type"/>
				<!--  设备类别  -->
				<grg:DataGridColumn locale="machineType" dataField="machineType" labelFunction="{transferDataDict}"/>
				<!-- 钞票类型  -->
				<grg:DataGridColumn locale="moneyType" dataField="moneyType" labelFunction="{transferDataDict}"/>
				
				<!--所属机构-->
				<grg:DataGridColumn locale="orgName" dataField="orgName" />
				<!--版本-->
				<grg:DataGridColumn locale="versionNum" dataField="versionNum" labelFunction="{transferDataDict}"/>
				<!--业务类别
				<grg:DataGridColumn locale="typeName" dataField="termType" labelFunction="{transferDataDict}" />-->
				<!--交易时间：-->
				<grg:DataGridColumn locale="sendTime" dataField="tranDate" labelFunction="{DataGridColumnUtils.formatYYYYMMDDHHMISS}" fontSize="14" />
				<!--操作-->
				<grg:DataGridColumn headerStyleName="centerDataGridHeader" locale="operations" width="100">
					<grg:itemRenderer>
						<fx:Component>
							<s:MXItemRenderer>
								<fx:Script>
									<![CDATA[
										import mx.core.IVisualElement;
										
										import org.idmedia.as3commons.util.StringUtils;
										
										import sent.transmgr.constants.CmlNoteflowDetailInfoConsts;
										override public function set data(value:Object):void
										{
											super.data = value;
											//StringUtils.isBlank(obj.barcodeFlowNum)
											/* if( !StringUtils.isBlank(data.barcodeFlowNum) )
											{
												viewNoteflowDetailBtn.visible = true;
												viewNoteflowDetailBtn.includeInLayout = true;
											}
											else
											{
												viewNoteflowDetailBtn.visible = false;
												viewNoteflowDetailBtn.includeInLayout = false;
											} */
											viewNoteflowDetailBtn.visible = true;
											viewNoteflowDetailBtn.includeInLayout = true;
										}
									]]>
								</fx:Script>
								<grg:GRGModuleButtonBar2 width="100%" height="16" align="center" menuId="{parentDocument.menu.id}">
									<!--查看交易详情
									<grg:Image id="showTransDetailBtn" privilegeCode="showTransDetailInfo"
											   source="@Embed('/resources/theme/images/icons/detail.png')" 
											   locale="showTransDetailInfo" width="16" height="16"
											   click="parentDocument.showTransDetailInfo()" />
									<s:Spacer width="5"/>-->
									<!--查看冠字号追踪详情-->
									<grg:Image id="viewNoteflowDetailBtn" privilegeCode="viewNoteflowDetailInfo"
											   source="@Embed('/resources/theme/images/icons/detail.png')" 
											   locale="viewNoteflowDetailInfo" width="16" height="16"
											   click="parentDocument.viewTailDetailInfo()" />
								</grg:GRGModuleButtonBar2>
							</s:MXItemRenderer>
						</fx:Component>
					</grg:itemRenderer>
				</grg:DataGridColumn>
			</grg:columns>
		</grg:DataGrid>
		
	   
		<s:Group width="100%">
		<grg:Label width="35%" left="0" id="lbl_outOfResultRangeTips" verticalAlign="middle" fontSize="12" paddingTop="5" paddingLeft="5"  color="#FF0000"/>
		<!--分页-->
		<grg:PageNavigatorBar width="65%" id="buttonPagingBar" bottom="0" pageVo="{page}"
							  pagingFunction="{loadPage}" right="0"/>
		</s:Group>
	</s:BorderContainer>
	
</grg:TabModule>
