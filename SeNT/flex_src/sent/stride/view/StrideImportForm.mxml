<?xml version = "1.0" encoding = "utf-8"?>
<grg:TitleWindow initialize="init()"
	width="600" height="300"
	layout = "vertical"
	locale = "cmlStrideImportRecordsForm"
	xmlns:fx = "http://ns.adobe.com/mxml/2009"
	xmlns:s = "library://ns.adobe.com/flex/spark"
	xmlns:mx = "library://ns.adobe.com/flex/mx"
	xmlns:parsley="http://www.spicefactory.org/parsley"
	xmlns:grg="http://grg.grgbanking.com/platform/" helpTips="helpTip">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<parsley:Configure reuse="false"/>
		<mx:NumberFormatter id="fileSizeFormatter" useThousandsSeparator="true"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			[Bindable]
			private var selectedFiles:ArrayCollection = new ArrayCollection([]);
			private var singleThreadFiles:Array = [];
			[Bindable]
			private var useSingleThread:Boolean = true;
			private var fileRefs: FileReferenceList = new FileReferenceList();
			private var urlrequest: URLRequest = new URLRequest("SeNT/fsn.fsnFilesImport");
			private var uploadeds:Array = [];
			private function init(): void
			{
				Security.allowDomain("*");
				fileRefs.addEventListener(Event.SELECT, fileSelectHandler);
				fileRefs.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				fileRefs.addEventListener(Event.COMPLETE, completeHandler);
				addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);   
			}
			private function selectFile(): void
			{
				fileRefs.browse([new FileFilter("Zip(*.zip)", "*.zip")]);
			}
			private function fileSelectHandler(event: Event): void
			{
				for each (var f: FileReference in fileRefs.fileList)
				{
					var isIn:Boolean = false;
					for each( var ff:FileReference in selectedFiles){
						if(ff.name == f.name){
							isIn = true;
							break;
						}
					}
					if(!isIn){
						selectedFiles.addItem(f);
					}
				}
			}
			private function uploadFile(): void
			{               
				for each (var f: FileReference in selectedFiles)
				{
					var isUp:Boolean = false;
					for each(var fileName:String in uploadeds){
						if(fileName==f.name){
							isUp = true;
							break;
						}
					}
					if(isUp){
						continue;
					}
					try{
						f.upload(urlrequest);
						uploadeds.push(f.name);
					}
					catch (e: Error){
						Alert.show(e.message);
					}
				}               
			}
			private function singleThreadUploadFile(): void
			{
				//FIFO：逐个从列表中取出，进行同步上传
				if (singleThreadFiles.length > 0)
				{
					var f: FileReference = singleThreadFiles.pop() as FileReference;
					var isUp:Boolean = false;
					for each(var fileName:String in uploadeds){
						if(fileName==f.name){
							isUp = true;
							break;
						}
					}
					if(!isUp){
						f.addEventListener(Event.COMPLETE, doSingleUploadFileComplete);
						f.upload(urlrequest);
						uploadeds.push(f.name);
					}else{
						singleThreadUploadFile();
					}
				}
			}
			private function doSingleUploadFileComplete(event: Event): void
			{
				var f: FileReference = event.target as FileReference;
				f.removeEventListener(Event.COMPLETE, doSingleUploadFileComplete);
				singleThreadUploadFile();
			}
			private function ioErrorHandler(e:IOErrorEvent): void
			{
				Alert.show(e.text);
			}
			private function completeHandler(e: Event): void
			{
				//img.source = e.target.data;
			}
			private function showImage(e: Event): void
			{               
				//var f: FileReference = (e.target as DataGrid).selectedItem as FileReference;
				//f.addEventListener(Event.COMPLETE, completeHandler);
				//f.load();
			}
			public function removeFile(f: FileReference): void
			{
				var index: int = selectedFiles.getItemIndex(f);
				if (index != -1)
					selectedFiles.removeItemAt(index);
			}
			protected function selectFileBut_clickHandler(event:MouseEvent):void
			{
				
			}
			
			protected function files_itemClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				//Alert.show("row");
			}
			
			/**
			 * 取消
			 */  
			override protected function cancel():void
			{
				close();
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
		]]>
	</fx:Script>
	
	<mx:VBox width="100%" height="100%">
		<mx:HBox width="100%" height="10%">
			<s:Button label="浏览..." id="selectFileBut" click="selectFile()"/>
			<mx:Box width="100%" horizontalAlign="right">
				<s:Button label="清空" click="selectedFiles.removeAll();" id="removeAllButton"/>
			</mx:Box>
		</mx:HBox>
		<mx:DataGrid id="files" dataProvider="{selectedFiles}" change="showImage(event)" width="100%" height="100%" 
					 itemClick="files_itemClickHandler(event)">
			<mx:columns>
				<mx:DataGridColumn headerText="文件名" dataField="name" width="250"/>
				<mx:DataGridColumn headerText="大小(字节)" dataField="size" width="100" textAlign="center">
					<mx:itemRenderer>
						<fx:Component>
							<mx:Label text="{outerDocument.fileSizeFormatter.format(data.size)}" textAlign="right"/>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn headerText="上传进度" width="200" textAlign="center">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox>
								<fx:Script>
									<![CDATA[
										import flash.events.ProgressEvent;
										import mx.controls.ProgressBar;
										import flash.events.ProgressEvent;
										
										import mx.controls.ProgressBar;
										import mx.events.FlexEvent;
										private function initProgressBar(event:Event):void{
											
											var pb:ProgressBar = event.target as ProgressBar;
											pb.label = "%3%%";
											pb.setProgress(0,100);
											var f:FileReference = data as FileReference;
											f.addEventListener(ProgressEvent.PROGRESS,function(event:ProgressEvent):void{
												pb.setProgress(event.bytesLoaded,event.bytesTotal);
												if(event.bytesLoaded > event.bytesTotal * 0.8) {
													deleteItem.enabled = false ;
												}
											});
											f.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,function(event:DataEvent):void{
												pb.label = event.data;
											});
											
										}
									]]>
								</fx:Script>
								<mx:ProgressBar verticalCenter="true" width="100%" paddingLeft="5" paddingRight="5" 
												maximum="100" minimum="0" labelPlacement="center" mode="manual" 
												label="%3%%" textAlign="center" creationComplete="initProgressBar(event)"/>
								<!--
								<mx:LinkButton label="取消"> 
									<mx:click>
										<![CDATA[
											var f:FileReference = data as FileReference;
											f.cancel();
										]]>
									</mx:click>
								</mx:LinkButton>
								-->
								<mx:LinkButton label="删除" textAlign="center" id="deleteItem"> 
									<mx:click>
										<![CDATA[
										var f:FileReference = data as FileReference;
										outerDocument.removeFile(f);
										]]>
									</mx:click>
								</mx:LinkButton>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	<mx:HBox height="10%" width="100%">
		<mx:Button label="上传" >
			<mx:click>
				<![CDATA[
					if(useSingleThread){
						singleThreadFiles = selectedFiles.toArray().concat();
						singleThreadFiles.reverse();
						singleThreadUploadFile();
						removeAllButton.enabled = false ;
					}else{
						uploadFile();
						removeAllButton.enabled = false ;
					}
				]]>
			</mx:click>
		</mx:Button>
		<!--<mx:CheckBox id="checkboxSingleThread" label="同时上传多个文件" selected="{!useSingleThread}" 
					 change="useSingleThread = !checkboxSingleThread.selected"/>-->
		<mx:Box width="100%" horizontalAlign="right">
			<s:Button label="确定" click="cancel()"/>
		</mx:Box>
	</mx:HBox>
</grg:TitleWindow>

