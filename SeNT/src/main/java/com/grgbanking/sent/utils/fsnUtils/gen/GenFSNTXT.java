package com.grgbanking.sent.utils.fsnUtils.gen;

import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.zip.ZipOutputStream;

import com.grgbanking.sent.utils.fsnUtils.FsnHeader;
import com.grgbanking.sent.utils.fsnUtils.FsnItem;
import com.grgbanking.sent.utils.fsnUtils.FsnItemImage;


public class GenFSNTXT {
	
	public static final SimpleDateFormat sf1 = new SimpleDateFormat("yyyyMMddHHmmss");
	public static final SimpleDateFormat sf2 = new SimpleDateFormat("yyyyMMdd");
	
	public enum serialNum {
		
		ZERO ("0", 0, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -32, -1, -1, 7, -128, -1, -1, 3, -128, -1, -1, 3, 0, -1, -1, -29, 15, -1, -1, -31, 31, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -31, 31, -2, -1, 3, 0, -1, -1, 3, 0, -1, -1, 7, -128, -1, -1, 15, -64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		ONE  ("1", 1, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -49, -1, -1, -1, -113, -1, -1, -1, -113, -1, -1, -1, -113, -1, -1, 3, 0, -1, -1, 1, 0, -1, -1, 1, 0, -1, -1, 1, -128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		TWO  ("2", 2, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -15, -57, -1, -1, -31, -121, -1, -1, -63, -121, -1, -1, -63, 15, -1, -1, -127, 31, -1, -1, -119, 31, -1, -1, 25, 63, -2, -1, 25, 62, -2, -1, 57, 62, -2, -1, 57, 60, -2, -1, 121, 56, -1, -1, 121, 24, -1, -1, -7, 0, -1, -1, -7, -127, -1, -1, -7, -127, -1, -1, -7, -61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		THREE("3", 3, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -57, -49, -1, -1, -61, -113, -1, -1, -61, 15, -1, -1, -29, 15, -1, -1, -29, 31, -2, -1, -31, 60, -2, -1, -15, 56, -2, -1, -15, 56, -2, -1, 113, 56, -2, -1, 113, 56, -2, -1, 97, 16, -2, -1, 99, 0, -2, -1, 3, 0, -1, -1, 3, -128, -1, -1, 7, -128, -1, -1, 15, -57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		FOUR ("4", 4, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -97, -1, -1, -1, 15, -2, -1, -1, 15, -4, -1, -1, 15, -8, -1, -1, 15, -16, -1, -1, -113, -31, -1, -1, -113, -63, -1, -1, -113, -121, -1, -1, -113, 15, -1, -1, 15, 15, -2, -1, 3, 0, -2, -1, 3, 0, -2, -1, 3, 0, -2, -1, 7, -3, -1, -1, -113, -1, -1, -1, -113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		FIVE ("5", 5, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, 1, -2, -1, -29, 0, -2, -1, -29, 0, -2, -1, -31, 0, -2, -1, -15, 49, -2, -1, -15, 49, -2, -1, -15, 49, -2, -1, -16, 49, -2, -1, -15, 49, -2, -1, -15, 57, -2, -1, -31, 57, -2, -1, 97, 56, -2, -1, 3, 56, -2, -1, 3, 60, -2, -1, 7, 126, -2, -1, 15, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}), 
		SIX  ("6", 6, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -64, -1, -1, 7, 0, -1, -1, 3, 0, -1, -1, 99, 16, -1, -1, -15, 56, -2, -1, -15, 56, -2, -1, -15, 120, -2, -1, -15, 120, -2, -1, -15, 121, -2, -1, -15, 121, -2, -1, -15, 56, -2, -1, -15, 56, -1, -1, 3, 56, -1, -1, 7, 60, -1, -1, 7, -66, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}), 
		SEVEN("7", 7, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -125, 63, -2, -1, 1, 60, -2, -1, 1, 56, -2, -1, 3, 48, -2, -1, 127, 0, -2, -1, -1, 1, -2, -1, -1, 3, -2, -1, -1, 7, -2, -1, -1, 15, -2, -1, -1, 31, -2, -1, -1, 63, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}), 
		EIGHT("8", 8, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -97, -1, -1, -1, 7, -17, -1, -1, 7, -126, -1, -1, 3, 0, -1, -1, 3, 0, -1, -1, 67, 0, -1, -1, -31, 16, -2, -1, -15, 56, -2, -1, -15, 56, -2, -1, -15, 56, -2, -1, -15, 24, -2, -1, 97, 0, -2, -1, 3, 0, -1, -1, 3, 0, -1, -1, 7, -128, -1, -1, 7, -126, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}), 
		NINE ("9", 9, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -63, -1, -1, -9, -64, -1, -1, -13, -128, -1, -1, 113, 0, -1, -1, 49, 12, -1, -1, 49, 30, -2, -1, 49, 30, -2, -1, 49, 62, -2, -1, 49, 62, -2, -1, 49, 30, -2, -1, 49, 28, -1, -1, 1, 0, -1, -1, 1, -128, -1, -1, 3, -128, -1, -1, 7, -64, -1, -1, 15, -32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}), 
		A    ("A",10, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -13, -1, -1, -1, -61, -1, -1, -1, 3, -1, -1, -1, 7, -4, -1, -1, 7, -16, -1, -1, 71, -64, -1, -1, -25, -63, -1, -1, -57, -63, -1, -1, -49, -64, -1, -1, 15, -32, -1, -1, 7, -8, -1, -1, 3, -2, -1, -1, -125, -1, -1, -1, -29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}), 
		B    ("B",11, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, 1, 0, -1, -1, 1, 0, -2, -1, 1, 0, -2, -1, -15, 56, -2, -1, -15, 56, -2, -1, -15, 56, -2, -1, -15, 56, -2, -1, -7, 56, -2, -1, -7, 56, -2, -1, -15, 56, -1, -1, 97, 0, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, 7, -57, -1, -1, -113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}), 
		C    ("C",12, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -64, -1, -1, 7, -128, -1, -1, 7, -128, -1, -1, 3, 0, -1, -1, -63, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -61, 63, -2, -1, -125, 15, -1, -1, -121, -113, -1, -1, -113, -113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		D    ("D",13, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -2, -1, 1, 0, -2, -1, 0, 0, -2, -1, 1, 0, -2, -1, -15, 63, -2, -1, -7, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -15, 31, -2, -1, -31, 31, -1, -1, 1, 0, -1, -1, 3, 0, -1, -1, 7, -128, -1, -1, 31, -32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}), 
		E    ("E",14, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -32, -1, -1, 3, -64, -1, -1, 3, -64, -1, -1, 99, -60, -1, -1, 115, -50, -1, -1, 115, -50, -1, -1, 115, -52, -1, -1, 115, -52, -1, -1, 115, -52, -1, -1, 115, -52, -1, -1, 115, -52, -1, -1, 115, -52, -1, -1, -13, -50, -1, -1, -13, -49, -1, -1, -13, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		F    ("F",15, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -8, -1, -1, 0, -8, -1, -1, 0, -8, -1, -1, -99, -7, -1, -1, -97, -5, -1, -1, -97, -5, -1, -1, -97, -5, -1, -1, -97, -5, -1, -1, -97, -5, -1, -1, -97, -5, -1, -1, -97, -5, -1, -1, -65, -5, -1, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		G    ("G",16, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -4, -1, -1, 3, -4, -1, -1, 1, -8, -1, -1, -15, -8, -1, -1, -7, -7, -1, -1, -7, -5, -1, -1, -3, -13, -1, -1, -35, -13, -1, -1, -55, -5, -1, -1, -55, -7, -1, -1, -63, -8, -1, -1, -61, -4, -1, -1, -61, -4, -1, -1, -57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		H    ("H",17, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, 3, -64, -1, -1, -5, -4, -1, -1, -1, -4, -1, -1, -1, -4, -1, -1, -1, -4, -1, -1, -1, -4, -1, -1, -1, -4, -1, -1, -1, -4, -1, -1, -1, -4, -1, -1, -1, -124, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, 3, -16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		I    ("I",18, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 0, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		J    ("J",19, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -7, -97, -1, -1, -7, -97, -1, -1, -7, -97, -1, -1, -7, -97, -1, -1, -7, -97, -1, -1, -15, -97, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, 7, -128, -1, -1, 15, -128, -1, -1, -1, -97, -1, -1, -1, -97, -1, -1, -1, -97, -1, -1, -1, -97, -1, -1, -1, -97, -1, -1, -1, -97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		K    ("K",20, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, 1, 0, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, 3, -128, -1, -1, -1, -16, -1, -1, -1, -15, -1, -1, -1, -29, -1, -1, -1, -63, -1, -1, -1, -128, -1, -1, 63, 0, -1, -1, 15, 8, -1, -1, 7, 28, -2, -1, 3, 31, -2, -1, -127, 63, -2, -1, -31, 127, -2, -1, -15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		L    ("L",21, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -8, -1, -1, 1, -8, -1, -1, 1, -8, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		M    ("M",22, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, 3, 0, -2, -1, -1, -128, -1, -1, 127, -32, -1, -1, 63, -16, -1, -1, 15, -4, -1, -1, 15, -2, -1, -1, 15, -8, -1, -1, 63, -32, -1, -1, -1, -64, -1, -1, -1, 1, -1, -1, 1, 0, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, -29, -97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		N    ("N",23, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -120, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, -1, -121, -1, -1, -1, -31, -1, -1, -1, -32, -1, -1, 127, -8, -1, -1, 127, -8, -1, -1, 31, -4, -1, -1, 31, -2, -1, -1, 15, -1, -1, -1, -121, -1, -1, -1, 3, -4, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, 3, -128, -1, -1, -1, -85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		O    ("O",24, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -128, -1, -1, 15, 0, -1, -1, 7, 0, -2, -1, 7, 31, -2, -1, -29, 63, -2, -1, -29, 63, -2, -1, -13, 127, -4, -1, -13, 127, -2, -1, -13, 127, -2, -1, -29, 127, -2, -1, -29, 63, -2, -1, -61, 31, -2, -1, 7, 0, -2, -1, 7, 0, -1, -1, 15, -128, -1, -1, 63, -32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		P    ("P",25, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -4, -1, -1, 0, -8, -1, -1, 0, -8, -1, -1, -113, -7, -1, -1, -97, -7, -1, -1, -97, -7, -1, -1, -97, -7, -1, -1, -97, -7, -1, -1, -97, -7, -1, -1, 31, -8, -1, -1, 31, -4, -1, -1, 63, -4, -1, -1, 63, -4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		Q    ("Q",26, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -64, -1, -1, 7, -128, -1, -1, 3, -128, -1, -1, -31, 15, -1, -1, -15, 31, -2, -1, -15, 63, -2, -1, -15, 63, -2, -1, -47, 127, -2, -1, -63, 127, -2, -1, -63, 63, -2, -1, -63, 63, -2, -1, -31, 31, -1, -1, -63, 15, -1, -1, 1, 0, -1, -1, 1, -128, -1, -1, 9, -64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		R    ("R",27, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, -1, -1, 1, 0, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, -1, 112, -2, -1, -1, 112, -2, -1, -1, 113, -2, -1, -1, 113, -2, -1, -1, 112, -2, -1, 127, 112, -2, -1, 31, 112, -2, -1, 15, 48, -2, -1, 3, 32, -2, -1, -127, 1, -2, -1, -63, 3, -2, -1, -15, 7, -1, -1, -1, -49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		S    ("S",28, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -49, -57, -1, -1, -57, -125, -1, -1, -57, 1, -1, -1, -61, 1, -1, -1, -31, 16, -1, -1, -15, 24, -1, -1, -15, 24, -1, -1, -15, 24, -1, -1, 113, 28, -1, -1, 113, 28, -1, -1, 113, 28, -1, -1, 33, 28, -1, -1, 3, 14, -1, -1, 3, -114, -1, -1, 7, -49, -1, -1, -113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		T    ("T",29, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, 1, 0, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 63, -2, -1, -1, 127, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		U    ("U",30, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 0, -1, -1, 7, 0, -1, -1, 3, 0, -2, -1, 3, 0, -1, -1, -29, -1, -1, -1, -15, -1, -1, -1, -7, -1, -1, -1, -7, -1, -1, -1, -7, -1, -1, -1, -7, -1, -1, -1, -15, -1, -1, -1, -13, -1, -1, -1, -29, -1, -1, -1, 3, 0, -1, -1, 3, 0, -1, -1, 15, 0, -1, -1, -1, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		/*V*,*/
		W    ("W",31, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, 63, 0, -2, -1, 3, 0, -2, -1, 1, 0, -1, -1, 1, -16, -1, -1, 3, -16, -1, -1, 7, -128, -1, -1, 63, 0, -1, -1, 127, 0, -1, -1, 63, 0, -1, -1, 7, -64, -1, -1, 1, -16, -1, -1, 1, -32, -1, -1, 1, 0, -2, -1, 1, 0, -2, -1, 15, 0, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		X    ("X",32, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -7, -1, -1, -7, -8, -1, -1, 113, -4, -1, -1, 35, -2, -1, -1, 7, -1, -1, -1, 15, -1, -1, -1, 7, -1, -1, -1, 35, -2, -1, -1, 113, -4, -1, -1, -7, -8, -1, -1, -3, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		Y    ("Y",33, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -7, -1, -1, -1, -8, -1, -1, 127, -8, -1, -1, 63, -4, -1, -1, 1, -2, -1, -1, 1, -1, -1, -1, 1, -2, -1, -1, 63, -4, -1, -1, 127, -8, -1, -1, -1, -8, -1, -1, -1, -7, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}),
		Z    ("Z",34, new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -29, 127, -2, -1, -61, 63, -2, -1, -125, 63, -2, -1, 3, 63, -2, -1, 3, 62, -2, -1, 3, 60, -2, -1, 3, 56, -2, -1, 99, 48, -2, -1, -29, 32, -2, -1, -29, 1, -2, -1, -29, 3, -2, -1, -29, 7, -2, -1, -29, 15, -2, -1, -29, 31, -2, -1, -13, 63, -2, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
		
	    private String serial;
	    private int index;
	    private byte[] bitImg;
	    // 构造方法  
	    private serialNum(String serial, int index, byte[] bitImg) {  
	        this.serial = serial;
	        this.index = index;
	        this.bitImg = bitImg;
	    }
	    
	    public static String getSerial(int index) {
	        for (serialNum c : serialNum.values()) {
	            if (c.getIndex() == index) {
	                return c.serial;
	            }
	        }
	        return null;
	    }
	    
	    public static byte[] getBitImg(int index) {
	        for (serialNum c : serialNum.values()) {
	            if (c.getIndex() == index) {
	                return c.bitImg;
	            }
	        }
	        return null;
	    }
	    
	    public int getIndex() {
	        return index;
	    }
	    
	}
	
	
	private static List getSerialNo(boolean hasImage)
	{
		List l = new ArrayList();
		int isLetter = 0;
		int total = 0;
		String serieNo = "";
		byte[] bitImg;
		byte[] totalBitImg = new byte[4*32*12];
		
		while(total < 10)
		{
			Random random = new Random();
			int n = random.nextInt(34);
			if (n > 9)
			{
				isLetter ++;
				if (isLetter > 2)
					continue;
				else
				{
					serieNo += serialNum.getSerial(n);
					if (hasImage)
					{
						bitImg = serialNum.getBitImg(n);
						for (int i=0; i< 128; i++)
							totalBitImg[total*128+i] = bitImg[i];
					}
					
					total ++;
				}
			}
			else
			{
				serieNo += serialNum.getSerial(n);
				if (hasImage)
				{
					bitImg = serialNum.getBitImg(n);
					for (int i=0; i< 128; i++)
						totalBitImg[total*128+i] = bitImg[i];
				}
				total ++;
			}
			
		}
		/*
		for (int i=1280; i< 1536; i++)
			totalBitImg[i] = 0;
		*/
		l.add(serieNo);
		if (hasImage)
			l.add(totalBitImg);
		return l;
	}
	
	
	private static FsnHeader getFsnHeader(int count, boolean hasImage)
	{
		FsnHeader h = new FsnHeader(count, hasImage);
		return h;
	}
	
	
	private static void genFsn(int itemCount, int dateDiff, String term, DataOutputStream out, DataOutputStream outTXT, boolean hasImage, String zipFileName) throws IOException
	{
		//FsnHeader h = getFsnHeader(itemCount, hasImage);
		//h.write(out);
		
		FsnItem item = new FsnItem();
		int year, month, day, date;
		int hour, minute, second, time;
		
		int errorCode[] = { 0, 0, 0 };// 错误码(3个)
		int moneyFlag[] = { 67, 78, 89, 0 };// 货币标志
		
		int serNo[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		String machNo = "";// 机具编号
		int machinSNo[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		List serNOList;
		
		for (int i=0; i<itemCount; i++) {
			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.DAY_OF_MONTH, dateDiff);

			year  = cal.get(Calendar.YEAR);
			month = cal.get(Calendar.MONTH) + 1;
			day   = cal.get(Calendar.DAY_OF_MONTH);
			date  = ((year - 1980) << 9) | (month << 5) | day;// fsn文件内容的日期
			item.setDate(date);
			
			hour   = cal.get(Calendar.HOUR_OF_DAY);
			minute = cal.get(Calendar.MINUTE);
			second = cal.get(Calendar.SECOND);
			time = (hour << 11) | (minute << 5) | (second >> 1);// fsn文件内容的时间
			item.setTime(time);
			
			item.setTfFlag(1);// 真、假、残和旧币标志

			//int errorCode[] = { 0, 0, 0 };// 错误码(3个)
			item.setErrorCode(errorCode);

			//int moneyFlag[] = { 67, 78, 89, 0 };// 货币标志
			item.setMoneyFlag(moneyFlag);

			item.setVer(2);// 版别号

			item.setValuta(100);

			item.setCharNUM(10);// 冠字号码字符数

			serNOList = getSerialNo(hasImage);
			String serNoStr = (String) serNOList.get(0);
			
			
			//int serNo[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };//
			// 遍历12个冠字号码对应的字符
			for( int j = 0 ; j < serNoStr.length() ; j++ )
			{
				serNo[j] = serNoStr.charAt(j);
			}
			item.setsNo(serNo);// 冠字号码

			// 机具编号
			//String machNo = "";
			if (term != null)
			{
				machNo = term;
			}
			else
				machNo = "GRG/GRG/00000008";
			//int machinSNo[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			for( int j = 0 ; j < machNo.length() ; j++ )
			{
				machinSNo[j] = machNo.charAt(j);
			}
			item.setMachineSNo(machinSNo);
			
			item.setReserve1(0);

			//控制是否生成带图片格式的FSN
			if (hasImage) {
				byte[] bitImg = (byte[]) serNOList.get(1);
				FsnItemImage fi = new FsnItemImage();
				fi.setReserve2(0);
				fi.setData(bitImg);
				item.setImageSNo(fi);
			}
			
			//item.write(out, hasImage);
			
			item.writeTXT(outTXT, i+1, zipFileName);
			
			if ( itemCount != 0 && (itemCount % 10000) == 0 ) {
				//out.flush();
				outTXT.flush();
			}
		}
		
		//out.flush();
		outTXT.flush();
		
	}
	

	/**
	 * 标准版： -s 版本号  年月日  机构编码  设备编号(长度小于等于8) 交易类型码   -f 文件保存根目录
	 * 其他    ： -f 文件保存根目录
	 * @param args
	 */
	public static void main(String[] args)
	{
		String useStr = 
			"参数错误。\n参数规则为：\n  " +
			"生成标准FSN文件：\n  " +
			"-s 版本号  年月日  机构编码  设备编号(长度<=8) 交易类型码  -f 文件保存根目录  -n 记录条数 是否含图片(true|false)\n    " +
			"其中\"交易类型码\"如下：\n  " +
			"  GMSK	柜面收款\n    GMFK	柜面付款\n    ATMCK	ATM存款\n    ATMQK	ATM取款\n    ATMJC	ATM加钞\n    ATMQJ	ATM清机\n    XJLZ	现金流转\n    GZHM	冠字号码\n  " +
			"生成非标准FSN文件：\n  " +
			"-f 文件保存根目录  -n 记录条数\n  是否含图片(true|false)" +
			"例如：\n  " +
			"-s v1.0 20140225 10001000 00000010 GMSK -f D:\\MyFSN -n 1000 true\n  " +
			"-f D:\\MyFSN -n 1000 true\n  " +
			"\"文件保存根目录\"中间不能有空格，像C:\\Documents and Settings\\这种格式肯定会出错";
		
		if (args == null || args.length == 0)
		{
			System.out.println(useStr);
			return;
		}
		
		if (!"-s".equalsIgnoreCase(args[0]) && !"-f".equalsIgnoreCase(args[0]))
		{
			System.out.println(useStr);
			return;
		}
		
		String ver = null, 
			   ymd = null, 
			   org = null, 
			   term = null, 
			   tranCode = null, 
			   path = null, 
			   filePath = null,
			   txtFilePath = null,
			   zipFileName = null;
		int totalNum = 0;
		Date date = null;
		boolean hasImage = true;
		boolean isStandard = false;
		
		if ("-s".equalsIgnoreCase(args[0]))
		{
			if (args.length != 11)
			{
				System.out.println(useStr);
				return;
			}
			if (args[2].length() != 8)
			{
				System.out.println("\"日期格式\"错误");
				System.out.println(useStr);
				return;
			}
			try
			{
				date = sf2.parse(args[2]);
			}
			catch (Exception e)
			{
				System.out.println("\"日期格式\"错误");
				System.out.println(useStr);
				return;
			}
			if (args[4].length() > 8)
			{
				System.out.println("\"设备编号\"错误,长度>8");
				System.out.println(useStr);
				return;
			}
			if (!"-n".equalsIgnoreCase(args[8]))
			{
				System.out.println(useStr);
				return;
			}
			try
			{
				totalNum = Integer.valueOf((args[9]));
			}
			catch (Exception e)
			{
				System.out.println("\"记录条数\"错误");
				System.out.println(useStr);
				return;
			}
			
			ver      = args[1];
			ymd      = args[2];
			org      = args[3];
			term     = args[4];
			tranCode = args[5];
			path     = args[7];
			
			//TODO
			hasImage = Boolean.valueOf(args[10]);
			
			isStandard = true;
		}
		
		if ("-f".equalsIgnoreCase(args[0]))
		{
			if (args.length != 5)
			{
				System.out.println(useStr);
				return;
			}
			
			if (!"-n".equalsIgnoreCase(args[2]))
			{
				System.out.println(useStr);
				return;
			}
			try
			{
				totalNum = Integer.valueOf((args[3]));
			}
			catch (Exception e)
			{
				System.out.println("\"记录条数\"错误");
				System.out.println(useStr);
				return;
			}
			
			hasImage = Boolean.valueOf(args[4]);
			
			path = args[1];
			date = new Date();
			
			isStandard = false;
		}
		
		// ymd 改为 ymdHms
		String ymdHms = ymd;
		// 取时分秒
		Date d = new Date();
		ymdHms += String.format("%tH", d) + String.format("%tM", d) + String.format("%tS", d);
		
		if (path.contains("\\"))
		{
			if (path.endsWith("\\"))
			{
				if (isStandard) {
					filePath = path + ver + "_" + ymdHms + "_" + org + "_" + term + "_" + tranCode + "_0_0_CNY.fsn";
					txtFilePath = path + ver + "_" + ymdHms + "_" + org + "_" + term + "_" + tranCode + "_0_0_CNY.txt";
				}
				else
				{
					filePath = path + sf1.format(date) + ".fsn";
					txtFilePath = path + sf1.format(date) + ".txt";
				}
			}
			else
			{
				if (isStandard) {
					filePath = path + "\\" + ver + "_" + ymdHms + "_" + org + "_" + term + "_" + tranCode + "_0_0_CNY.fsn";
					txtFilePath = path + "\\" + ver + "_" + ymdHms + "_" + org + "_" + term + "_" + tranCode + "_0_0_CNY.txt";
				}
				else
				{
					filePath = path + "\\" + sf1.format(date) + ".fsn";
					txtFilePath = path + "\\" + sf1.format(date) + ".txt";
				}
			}
			
			//TODO 
			filePath = path + "\\" + ymdHms + ".fsn";
			zipFileName = ymdHms + ".zip";
			txtFilePath = path + "\\" + ymdHms + ".txt";
		}
		else
		{
			if (path.endsWith("/"))
			{
				if (isStandard) {
					filePath = path + ver + "_" + ymdHms + "_" + org + "_" + term + "_" + tranCode + "_0_0_CNY.fsn";
					txtFilePath = path + ver + "_" + ymdHms + "_" + org + "_" + term + "_" + tranCode + "_0_0_CNY.txt";
				}
				else {
					filePath = path + sf1.format(date) + ".fsn";
					txtFilePath = path + sf1.format(date) + ".txt";
				}
			}
			else
			{
				if (isStandard) {
					filePath = path + "/" + ver + "_" + ymdHms + "_" + org + "_" + term + "_" + tranCode + "_0_0_CNY.fsn";
					txtFilePath = path + "/" + ver + "_" + ymdHms + "_" + org + "_" + term + "_" + tranCode + "_0_0_CNY.txt";
				}
				else {
					filePath = path + "/" + sf1.format(date) + ".fsn";
					txtFilePath = path + sf1.format(date) + ".txt";
				}
			}
			
			//TODO 
			filePath = path + "/" + ymdHms + ".fsn";
			zipFileName = ymdHms + ".zip";
			txtFilePath = path + "/" + ymdHms + ".txt";
		}
		
		
		DataOutputStream dataOut = null;
		DataOutputStream dataOutTXT = null;
		
		try
		{
			// 创建输出流文件对象  
			FileOutputStream fos = null;//new FileOutputStream(filePath);
			FileOutputStream fosTXT = new FileOutputStream(txtFilePath);
			// 创建原始数据输出流对象  
			dataOut = new DataOutputStream(fos);
			dataOutTXT = new DataOutputStream(fosTXT);
		}
		catch (Exception e) {
            //e.printStackTrace();
			System.out.println("文件路径"+ path +"不存在");
        }
		
		try {
			//int diff = (int) ( date.getTime() - ) / (24 * 60 * 60 * 1000) );
			
			BigDecimal bd1 = new BigDecimal(date.getTime());
			BigDecimal bd2 = new BigDecimal(System.currentTimeMillis());
			BigDecimal bd3 = bd1.subtract(bd2);
			BigDecimal bd4 = bd3.divide(new BigDecimal(1000 * 24 * 60 * 60), 0, BigDecimal.ROUND_CEILING);
			int diff = bd4.intValue();
			
			genFsn(totalNum, diff, term, dataOut, dataOutTXT, hasImage, zipFileName);
			
			System.out.println("生成FSN文件成功");
		}
		catch (Exception e) {
            //e.printStackTrace();
			System.out.println("生成FSN文件失败");
        }
		finally
		{
			try {
				//dataOut.close();
				dataOutTXT.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
	}

}
