/** * 文件名：CmlSentInfoJDBCForOracleDao.java * 创建日期： 2013-10-17 * Copyright (c) 2011-2013 广电运通 * All rights reserved.  * 修改记录： * 1.修改时间, 修改 *   修改内容： */package com.grgbanking.sent.transmgr.dao;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Repository;import com.grgbanking.exception.AppPlaceHolderException;import com.grgbanking.platform.core.dao.DBDialectHelper;import com.grgbanking.platform.core.dao.Page;import com.grgbanking.platform.core.exception.SysException;import com.grgbanking.platform.module.common.MessageKeyConstants;import com.grgbanking.sent.checkin.entity.CmlSentInfoStatisVO;import com.grgbanking.sent.transmgr.entity.CmlImprecords;import com.grgbanking.sent.transmgr.entity.CmlSentInfo;import com.grgbanking.sent.utils.ArrayUtil;import com.grgbanking.sent.utils.CollectionsUtil;import com.grgbanking.sent.utils.DateUtil;import com.grgbanking.sent.utils.StringUtil;/** * 纸币冠字号码JDBC DAO <br> *  * Oracle数据库查询版本<br> *  * @author lwgang *  */@Repositorypublic class CmlSentInfoJDBCForOracleDao extends CmlSentInfoJDBCDao {	@SuppressWarnings("unchecked")	public List<CmlSentInfo> getCmlSentInfoList(Map<String, Object> condition)			throws SysException {		try {			logger.info("getCmlSentInfoList()");			Map<String, Object> sqlAndParams = constructSqlAndParameter(condition);			List<String> sqlList = (List<String>) sqlAndParams.get("sqlList");			Object[] sqlParams = (Object[]) sqlAndParams.get("sqlParams");			Integer queryMaxRows = (Integer) condition.get("queryMaxRows");			// 从多个表查询			int needSkip = 0; // 读取之前需要跳过的行数			int needFetchRows = Math.max(queryMaxRows, 0); // 需要读取的行数			String[] sqlArray = sqlList.toArray(new String[0]);			QueryResult<CmlSentInfo> queryResult = fectchMultiSqlData(sqlArray,					sqlParams, needSkip, needFetchRows, queryMaxRows,					new RowMapper<CmlSentInfo>() {						public CmlSentInfo mapRow(ResultSet rs)								throws SQLException {							CmlSentInfo cmlSentInfo = new CmlSentInfo();							setFieldValue(rs, cmlSentInfo);							cmlSentInfo.setFromTableName(rs									.getString("C_FROM_TABLE_NAME"));							return cmlSentInfo;						}					});			return queryResult.result;		} catch (ParseException e) {			throw new SysException(e);		} catch (SQLException e) {			throw new SysException(e);		}	}	@SuppressWarnings("unchecked")	public Page<CmlSentInfo> getCmlSentInfoPage(Map<String, Object> parameter)			throws SysException {		try {			logger.info("CmlSentInfoJDBCForOracleDao.getCmlSentInfoPage()");			Page<CmlSentInfo> page = (Page) parameter.get("page");			Map<String, Object> condition = (Map<String, Object>) parameter					.get("condition");			Map<String, Object> sqlAndParams = constructSqlAndParameter(condition);			List<String> sqlList = (List<String>) sqlAndParams.get("sqlList");			Object[] sqlParams = (Object[]) sqlAndParams.get("sqlParams");			Integer queryMaxRows = (Integer) condition.get("queryMaxRows");			// 从多个表查询			int needSkip = (page.getPageNo() - 1) * page.getPageSize(); // 读取之前需要跳过的行数			int needFetchRows = Math.min(page.getPageSize(), queryMaxRows					- needSkip); // 需要读取的行数			if (needFetchRows <= 0) {				// 读取第一页				needSkip = 0;				needFetchRows = page.getPageSize();			}			String[] sqlArray = sqlList.toArray(new String[0]);			QueryResult<CmlSentInfo> queryResult = fectchMultiSqlData(sqlArray,					sqlParams, needSkip, needFetchRows, queryMaxRows,					new RowMapper<CmlSentInfo>() {						public CmlSentInfo mapRow(ResultSet rs)								throws SQLException {							CmlSentInfo cmlSentInfo = new CmlSentInfo();							setFieldValue(rs, cmlSentInfo);							cmlSentInfo.setFromTableName(rs									.getString("C_FROM_TABLE_NAME"));							return cmlSentInfo;						}					});			page.setResult(queryResult.result);			page.setTotalCount(queryResult.getTotalRows());			return page;		} catch (ParseException e) {			throw new SysException(e);		} catch (SQLException e) {			throw new SysException(e);		}	}	private Map<String, Object> constructSqlAndParameter(			Map<String, Object> condition) throws ParseException {		String startTimeString = (String) condition.get("startTime");		String endTimeString = (String) condition.get("endTime");		String termId = (String) condition.get("termId");		String pathCode = (String) condition.get("pathCode");		String noteType = (String) condition.get("noteType");		String seriaNo = (String) condition.get("seriaNo");		String termType = (String) condition.get("termType");		Integer queryMaxDays = (Integer) condition.get("queryMaxDays");		startTimeString = startTimeString.replace("-", "");		endTimeString = endTimeString.replace("-", "");		Date startTime = DateUtil.parseToDate(startTimeString, "yyyyMMdd");		Date endTime = DateUtil.parseToDate(endTimeString, "yyyyMMdd");		int daysDiff = DateUtil.daysBetween(startTime, endTime);		if (daysDiff < 0) {			throw new AppPlaceHolderException(					MessageKeyConstants.CML_MGR_BEGINDATE_CANNOT_BE_GREATER_THAN_ENDDATE,					"beginDate cannot greater than endDate");		}		if (daysDiff > queryMaxDays) {			throw new AppPlaceHolderException(					MessageKeyConstants.CML_MGR_QUERY_DAYS_INTERVAL_CANNOT_BE_GREATER_THAN,					"query days interval cannot be greater than [%s] days",					queryMaxDays);		}		// 开始拼sql template以及这些sql的参数		StringBuilder sbSqlTemplate = null;		// if(StringUtils.isNotBlank(isTranTail) && isTranTail.equals("1")){		// sbSqlTemplate = new StringBuilder(		// " select distinct t.*, '${TABLE_NAME}' C_FROM_TABLE_NAME" +		// " from ${TABLE_NAME} t" +		// " where 1=1"		// );		// }else{		sbSqlTemplate = new StringBuilder(				" select t.*, '${TABLE_NAME}' C_FROM_TABLE_NAME"						+ " from ${TABLE_NAME} t" + " where 1=1");		// }		List<String> paramList = new ArrayList<String>();		if (StringUtils.isNotBlank(termType)) {			sbSqlTemplate.append(" and C_TERM_TYPE = ?");			paramList.add(termType);		}		if (StringUtils.isNotBlank(pathCode)) {			sbSqlTemplate.append(" and C_PATHCODE like ?");			paramList.add(pathCode + "%");		}		if (StringUtils.isNotBlank(noteType)) {			sbSqlTemplate.append(" and C_NOTE_TYPE = ?");			paramList.add(noteType);		}		if (StringUtils.isNotBlank(seriaNo)) {			if (DBDialectHelper.isOracle()) {				sbSqlTemplate.append(" and C_SERIA_NO like ? ");				paramList.add(seriaNo + "%");			} else {				sbSqlTemplate.append(" and C_SERIA_NO like ?");				paramList.add(seriaNo + "%");			}		}		if (StringUtils.isNotBlank(termId)) {			sbSqlTemplate.append(" and C_TERM_ID = ?");			paramList.add(termId);		}		String sqlTemplate = sbSqlTemplate.append(" Order By C_TRAN_DATE Desc")				.toString();		Object[] sqlParams = paramList.toArray();		// 生成多个查询的sql		Date[] dates = DateUtil.listDaysBetween(startTime, endTime, true, true);		List<String> sqlList = new ArrayList<String>();		for (int i = dates.length - 1; i >= 0; i--) {			Date perDay = dates[i];			String monthDay = DateUtil.parseToString(perDay, "MMdd"); // 取月日			String tableName = "CML_SENT_INFOS_HIS_" + monthDay;			String sql = sqlTemplate.replace("${TABLE_NAME}", tableName);			sqlList.add(sql);		}		Map<String, Object> result = new HashMap<String, Object>();		result.put("sqlList", sqlList);		result.put("sqlParams", sqlParams);		return result;	}	// /**	// * 根据ID获取冠字号信息	// */	// public CmlSentInfo getCmlSentInfosByIdFromTable(Map<String, Object>	// parameter)	// {	// String tableName = (String)parameter.get("tableName");	// String id = (String)parameter.get("id");	//	// return getCmlSentInfosByIdFromTable(id, tableName);	// }	/**	 * 根据ID获取冠字号信息	 */	public CmlSentInfo getCmlSentInfosByIdFromTable(String id,			final String tableName) {		String sql = "select * from " + tableName + " where i_id=?";		Object[] sqlParams = new Object[] { id };		try {			CmlSentInfo result = this.fetchUnique(sql, sqlParams,					new RowMapper<CmlSentInfo>() {						public CmlSentInfo mapRow(ResultSet rs)								throws SQLException {							CmlSentInfo cmlSentInfo = new CmlSentInfo();							setFieldValue(rs, cmlSentInfo);							cmlSentInfo.setFromTableName(tableName);							return cmlSentInfo;						}					});			return result;		} catch (SQLException e) {			throw new SysException(e);		}	}	// /**	// * 根据业务流转码获取冠字号分页	// * @param parameter	// * @return	// */	// public Page<CmlSentInfo>	// getCmlSentInfosByBarcodeFlowNumFromTable(Map<String, Object> parameter)	// {	// return getCmlSentInfoPageFromTodayAndMMDDTable(parameter);	// }	//	// /**	// * 根据交易ID获取冠字号分页	// * @param parameter	// * @return	// */	// public Page<CmlSentInfo> getCmlSentInfosByTranIdFromTable(Map<String,	// Object> parameter)	// {	// return getCmlSentInfoPageFromTodayAndMMDDTable(parameter);	// }	/**	 * 获取冠字号分页	 * 	 * @param parameter	 * @return	 */	@SuppressWarnings("unchecked")	public Page<CmlSentInfo> getCmlSentInfoPageFromTodayAndMMDDTable(			Map<String, Object> parameter) {		try {			logger					.info("CmlSentInfoJDBCForOracleDao.getCmlSentInfosFromTable()");			Page<CmlSentInfo> page = (Page) parameter.get("page");			Map<String, Object> condition = (Map<String, Object>) parameter					.get("condition");			String tableNames = StringUtil.trim((String) condition					.get("tableNames")); // 传递查询的表名集合用"|"隔开			String barcodeFlowNum = StringUtil.trim((String) condition					.get("barcodeFlowNum"));			String barcodeFlowNumForSecondQuery = StringUtil					.trim((String) condition							.get("barcodeFlowNumForSecondQuery"));			String tranMonthday = StringUtil.trim((String) condition					.get("tranMonthday"));			String tranId = StringUtil.trim((String) condition.get("tranId"));			String tranIdForSecondQuery = StringUtil.trim((String) condition					.get("tranIdForSecondQuery"));			String termType = StringUtil.trim((String) condition					.get("termType"));			Integer queryMaxRows = (Integer) condition.get("queryMaxRows");			String serialNo = StringUtil.trim((String) condition					.get("serialNo"));			String noteType = StringUtil.trim((String) condition					.get("noteType"));			String queryAll = StringUtil.trim((String) condition					.get("queryAll"));			if ("true".equals(queryAll)) {				// 是否查询全部--将queryMaxRows设到很大的值				queryMaxRows = queryMaxRows * 100;			}			// 查询的表名为空，赋值为当天表以及MMDD表			if (StringUtils.isBlank(tableNames)) {				/*				 * if( StringUtils.isNotBlank(monthDay) ) { tableNames +=				 * "CML_SENT_INFOS_HIS_"+monthDay; }				 */				// monthDay以cml_imp_records表的c_tran_monthday为准				List<CmlImprecords> l = new ArrayList<CmlImprecords>();				if (StringUtils.isNotBlank(tranId)) {					if (tranId.indexOf(",") > -1) {						String[] tranIds = tranId.split(",");						l = this.executeQuery(								"select * from CML_IMP_RECORDS where c_id in ("										+ StringUtil.generateMultiPartString(												"?", tranIds.length, ", ")										+ ")", tranIds,								new CmlImprecordsMapper());					} else {						l = this								.executeQuery(										"select * from CML_IMP_RECORDS where c_id = ? ",										new Object[] { tranId },										new CmlImprecordsMapper());					}				}				if (l != null && l.size() > 0) {					Map<String, String> m = new HashMap<String, String>();					for (CmlImprecords cmlImprecord : l) {						if (m.get(cmlImprecord.getTranDate().substring(4, 8)) == null) {							m.put(cmlImprecord.getTranDate().substring(4, 8),									"");							tableNames += "CML_SENT_INFOS_HIS_"									+ cmlImprecord.getTranDate()											.substring(4, 8) + "|";						}					}				} else if (StringUtils.isNotBlank(tranMonthday)) {					tableNames += "CML_SENT_INFOS_HIS_" + tranMonthday;				}			}			if (StringUtils.isBlank(tableNames)) {				logger						.error("没有需要查询的表名,交易表与上传文件记录表(CML_IMP_RECORDS)使用ID不一致 tranId="								+ tranId);				throw new SysException(						"没有需要查询的表名,交易表与上传文件记录表(CML_IMP_RECORDS)使用ID不一致 tranId="								+ tranId);			}			logger.info("tableNames : " + tableNames);			// 开始拼sql template以及这些sql的参数			StringBuilder sbSqlTemplate = new StringBuilder(					" select t.*, '${TABLE_NAME}' C_FROM_TABLE_NAME"							+ " from ${TABLE_NAME} t" + " where 1=1");			List<String> paramList = new ArrayList<String>();			if (StringUtils.isNotBlank(termType)) {				sbSqlTemplate.append(" and C_TERM_TYPE = ?");				paramList.add(termType);			}			// if (StringUtils.isNotBlank(barcodeFlowNum)) {			// if(barcodeFlowNum.indexOf(",")>-1){			// String[] barcodeFlowNums = barcodeFlowNum.split(",");			// sbSqlTemplate.append(" and C_BARCODE_FLOWNUM in ("+StringUtil.generateMultiPartString("?",			// barcodeFlowNums.length, ", ")+")");			// CollectionsUtil.addAll(paramList, barcodeFlowNums);			//			// }else{			// sbSqlTemplate.append(" and C_BARCODE_FLOWNUM = ?");			// paramList.add(barcodeFlowNum);			// }			// }			//			// if (StringUtils.isNotBlank(barcodeFlowNumForSecondQuery)) {			// if(barcodeFlowNumForSecondQuery.indexOf(",")>-1){			// String[] barcodeFlowNumsForSecondQuery =			// barcodeFlowNumForSecondQuery.split(",");			// sbSqlTemplate.append(" and C_BARCODE_FLOWNUM in ("+StringUtil.generateMultiPartString("?",			// barcodeFlowNumsForSecondQuery.length, ", ")+")");			// CollectionsUtil.addAll(paramList, barcodeFlowNumsForSecondQuery);			//			// }else{			// sbSqlTemplate.append(" and C_BARCODE_FLOWNUM = ?");			// paramList.add(barcodeFlowNumForSecondQuery);			// }			// }			if (StringUtils.isNotBlank(tranId)) {				if (tranId.indexOf(",") > -1) {					String[] tranIds = tranId.split(",");					sbSqlTemplate.append(" and C_TRAN_ID in ("							+ StringUtil.generateMultiPartString("?",									tranIds.length, ", ") + ")");					CollectionsUtil.addAll(paramList, tranIds);				} else {					sbSqlTemplate.append(" and C_TRAN_ID = ?");					paramList.add(tranId);				}			}			if (StringUtils.isNotBlank(tranIdForSecondQuery)) {				if (tranIdForSecondQuery.indexOf(",") > -1) {					String[] tranIds = tranIdForSecondQuery.split(",");					sbSqlTemplate.append(" and C_TRAN_ID in ("							+ StringUtil.generateMultiPartString("?",									tranIds.length, ", ") + ")");					CollectionsUtil.addAll(paramList, tranIds);				} else {					sbSqlTemplate.append(" and C_TRAN_ID = ?");					paramList.add(tranIdForSecondQuery);				}			}			if (StringUtil.isNotBlank(serialNo)) {				sbSqlTemplate.append(" and C_SERIA_NO like ?");				paramList.add(serialNo + "%");			}			if (StringUtil.isNotBlank(noteType)) {				sbSqlTemplate.append(" and C_NOTE_TYPE = ?");				paramList.add(noteType);			}			String sqlTemplate = sbSqlTemplate.toString();			Object[] params = paramList.toArray();			List<String> sqlList = new ArrayList<String>();			String[] tableNameList = StringUtils.split(tableNames, '|');			for (String tableName : tableNameList) {				String sql = sqlTemplate.replace("${TABLE_NAME}", tableName);				sqlList.add(sql);			}			// 从多个表查询			int needSkip = (page.getPageNo() - 1) * page.getPageSize(); // 读取之前需要跳过的行数			int needFetchRows = Math.min(page.getPageSize(), queryMaxRows					- needSkip); // 需要读取的行数			if (needFetchRows <= 0) {				// 读取第一页				needSkip = 0;				needFetchRows = page.getPageSize();			}			String[] sqlArray = sqlList.toArray(new String[0]);			QueryResult<CmlSentInfo> queryResult = fectchMultiSqlData(sqlArray,					params, needSkip, needFetchRows, queryMaxRows,					new RowMapper<CmlSentInfo>() {						public CmlSentInfo mapRow(ResultSet rs)								throws SQLException {							CmlSentInfo cmlSentInfo = new CmlSentInfo();							setFieldValue(rs, cmlSentInfo);							cmlSentInfo.setFromTableName(rs									.getString("C_FROM_TABLE_NAME"));							return cmlSentInfo;						}					});			page.setResult(queryResult.result);			page.setTotalCount(queryResult.getTotalRows());			return page;		} catch (SQLException e) {			throw new SysException(e);		}	}	/**	 * 根据条件获取全部冠字号	 * 	 * @param parameter	 * @return	 */	public List<CmlSentInfo> getAllCmlSentInfoFromTodayAndMMDDTable(			Map<String, Object> condition) {		try {			// 如需要添加条件，可参考getCmlSentInfoPageFromTodayAndMMDDTable方法添加			String tranId = StringUtil.trim((String) condition.get("tranId"));			Integer queryMaxRows = (Integer) condition.get("queryMaxRows");			String tableNames = StringUtil.trim((String) condition					.get("tableNames"));			// 查询的表名为空，赋值为当天表以及MMDD表			if (StringUtils.isBlank(tableNames)) {				List<CmlImprecords> l = this.executeQuery(						"select * from CML_IMP_RECORDS where c_id = ? ",						new Object[] { tranId }, new CmlImprecordsMapper());				if (l != null && l.size() > 0) {					CmlImprecords cir = l.get(0);					tableNames += "CML_SENT_INFOS_HIS_"							+ cir.getTranDate().substring(4, 8);				}			}			StringBuilder sbSqlTemplate = new StringBuilder(					" select t.*, '${TABLE_NAME}' C_FROM_TABLE_NAME"							+ " from ${TABLE_NAME} t" + " where 1=1");			List<String> paramList = new ArrayList<String>();			if (StringUtils.isNotBlank(tranId)) {				sbSqlTemplate.append(" and C_TRAN_ID = ?");				paramList.add(tranId);			}			String sqlTemplate = sbSqlTemplate.toString();			Object[] params = paramList.toArray();			List<String> sqlList = new ArrayList<String>();			String[] tableNameList = StringUtils.split(tableNames, '|');			for (String tableName : tableNameList) {				String sql = sqlTemplate.replace("${TABLE_NAME}", tableName);				sqlList.add(sql);			}			String[] sqlArray = sqlList.toArray(new String[0]);			QueryResult<CmlSentInfo> queryResult = fectchMultiSqlData(sqlArray,					params, 0, queryMaxRows, queryMaxRows,					new RowMapper<CmlSentInfo>() {						public CmlSentInfo mapRow(ResultSet rs)								throws SQLException {							CmlSentInfo cmlSentInfo = new CmlSentInfo();							setFieldValue(rs, cmlSentInfo);							cmlSentInfo.setFromTableName(rs									.getString("C_FROM_TABLE_NAME"));							return cmlSentInfo;						}					});			return queryResult.result;		} catch (SQLException e) {			throw new SysException(e);		}	}	/**	 * @throws SQLException	 * 	 */	public int updateImageInfo(CmlSentInfo cmlSentInfo) {		try {			String sqlTemplate = " update ${TABLE_NAME} set"					+ " C_IMAGE_TYPE = ? " + " where I_ID = ?";			List<String> sqls = new ArrayList<String>();			sqls.add(sqlTemplate.replace("${TABLE_NAME}", "cml_sent_infos_his_"					+ cmlSentInfo.getTranMonthday()));			Object[] sqlParams = new Object[] { cmlSentInfo.getImageType(),			// cmlSentInfo.getFileName(),					cmlSentInfo.getId() };			int[] result = this.executeUpdates(sqls.toArray(new String[0]),					sqlParams);			return ArrayUtil.calculateTotal(result);		} catch (SQLException e) {			throw new SysException(e);		}	}	public class CmlImprecordsMapper implements RowMapper<CmlImprecords> {		@Override		public CmlImprecords mapRow(ResultSet rs) throws SQLException {			CmlImprecords cir = new CmlImprecords();			cir.setId(rs.getString("C_ID"));			cir.setTranDate(rs.getString("C_TRAN_DATE"));			return cir;		}	}	public class CmlSentInfosMapper implements RowMapper<CmlSentInfo> {		@Override		public CmlSentInfo mapRow(ResultSet rs) throws SQLException {			CmlSentInfo cir = new CmlSentInfo();			cir.setId(rs.getString("I_ID"));			cir.setNoteType(rs.getString("C_NOTE_TYPE"));			cir.setTranDate(rs.getString("C_TRAN_DATE"));// 交易时间，例如:20160203144314			cir.setSeriaNo(rs.getString("C_SERIA_NO"));			cir.setVersionNum(rs.getString("C_VERSION_NUM"));			cir.setDenomination(rs.getString("C_DENOMINATION"));			cir.setMachinesno(rs.getString("C_MACHINESNO"));// 机具编号,例如：BOC15/GRG/CM40012345678			return cir;		}	}	/**	 * Mysql与Oracle数据库真分页查询， 从原来5分钟出查询结果优化到瞬间	 * 	 * @Description:	 * @param sql	 * @param begiRow	 * @param endRow	 * @return	 * @author Norman_chang	 * @since 2014-7-1 下午04:57:03	 */	@SuppressWarnings("unchecked")	public Page<CmlSentInfo> getCmlSentInfoForPage(Map<String, Object> parameter)			throws SysException {		Page<CmlSentInfo> page = (Page) parameter.get("page");		Map<String, Object> condition = (Map<String, Object>) parameter				.get("condition");		String startTimeString = (String) condition.get("startTime");		String endTimeString = (String) condition.get("endTime");		String termId = (String) condition.get("termId");		String pathCode = (String) condition.get("pathCode");		String flag = (String) condition.get("flag");		String noteType = (String) condition.get("noteType");		String seriaNo = (String) condition.get("seriaNo");		String termType = (String) condition.get("termType");		Integer queryMaxRows = (Integer) condition.get("queryMaxRows");		Integer queryMaxDays = (Integer) condition.get("queryMaxDays");		Date startTime = null;		Date endTime = null;		PreparedStatement ps = null;		ResultSet rs = null;		List<CmlSentInfo> queryResult = new ArrayList<CmlSentInfo>();		Calendar cal = Calendar.getInstance();		String tableName = null;		StringBuilder topSql = new StringBuilder(" ");		StringBuilder sqlTar = new StringBuilder(" ");		String sql = null;		int totalNum = 0;		boolean isFirst = true;		int endRow = 0;		try {			startTime = DateUtil.parseToDate(startTimeString, "yyyy-MM-dd");			endTime = DateUtil.parseToDate(endTimeString, "yyyy-MM-dd");			cal.setTime(endTime);			int daysDiff = DateUtil.CalDaysBetween(startTime, endTime);			if (daysDiff < 0) {				throw new AppPlaceHolderException(						MessageKeyConstants.CML_MGR_BEGINDATE_CANNOT_BE_GREATER_THAN_ENDDATE,						"beginDate cannot greater than endDate");			}			if (daysDiff > queryMaxDays) {				throw new AppPlaceHolderException(						MessageKeyConstants.CML_MGR_QUERY_DAYS_INTERVAL_CANNOT_BE_GREATER_THAN,						"query days interval cannot be greater than [%s] days",						queryMaxDays);			}			if (DBDialectHelper.isOracle()) {				topSql.append(" select count(*) totalNum from ( ");			}			for (; daysDiff >= 0; daysDiff--) {				if (!isFirst) {					if (DBDialectHelper.isMySql()) {						sqlTar.append(" limit ");						sqlTar.append(queryMaxRows);						topSql.append(" limit ");						topSql.append(queryMaxRows);					}					sqlTar.append("  union all ");					topSql.append("  union all ");				}				tableName = "CML_SENT_INFOS_HIS_"						+ DateUtil.parseToString(cal.getTime(), "MMdd");				topSql.append(" select i_id from  ");				topSql.append(tableName);				topSql.append("  t where 1=1 ");				sqlTar						.append(" select i_id,c_barcode_flownum,c_seria_no,c_note_type,c_currency,c_pathcode,c_version_num,c_denomination,c_term_id,c_tran_date,c_type,c_machine_type,c_money_type, '");				sqlTar.append(tableName);				sqlTar.append("' as C_FROM_TABLE_NAME from  ");				sqlTar.append(tableName);				sqlTar.append(" where  1=1");				// 时间包含时分秒				// if(startTimeString.length() > 11){				// startTimeString = startTimeString.replace(" ",				// "").replace("-", "").replace(":", "");				// sqlTar.append(" and C_TRAN_DATE >= '");				// sqlTar.append(startTimeString + "'");				// topSql.append(" and C_TRAN_DATE >= '");				// topSql.append(startTimeString + "'");				// }				//				// if(endTimeString.length() > 11){				// endTimeString = endTimeString.replace(" ", "").replace("-",				// "").replace(":", "");				// sqlTar.append(" and C_TRAN_DATE <= '");				// sqlTar.append(endTimeString + "'");				// topSql.append(" and C_TRAN_DATE <= '");				// topSql.append(endTimeString + "'");				// }				if (StringUtils.isNotBlank(termType)) {					sqlTar.append(" and C_TERM_TYPE = ");					sqlTar.append(termType);					topSql.append(" and C_TERM_TYPE = ");					topSql.append(termType);				}				if (StringUtils.isNotBlank(pathCode)) {					if (null == flag || flag.equals("true")) {						sqlTar.append(" and C_PATHCODE like '");						sqlTar.append(pathCode);						sqlTar.append("%'");						topSql.append(" and C_PATHCODE like '");						topSql.append(pathCode);						topSql.append("%'");					}else{						sqlTar.append(" and C_PATHCODE = '");						sqlTar.append(pathCode);						sqlTar.append("'");						topSql.append(" and C_PATHCODE = '");						topSql.append(pathCode);						topSql.append("'");					}				}				if (StringUtils.isNotBlank(noteType)) {					sqlTar.append(" and C_NOTE_TYPE = '");					sqlTar.append(noteType);					sqlTar.append("' ");					topSql.append(" and C_NOTE_TYPE = '");					topSql.append(noteType);					topSql.append("' ");				}				if (StringUtils.isNotBlank(seriaNo)) {					sqlTar.append(" and C_SERIA_NO like '");					sqlTar.append(seriaNo);					sqlTar.append("%'");					topSql.append(" and C_SERIA_NO like '");					topSql.append(seriaNo);					topSql.append("%'");				}				if (StringUtils.isNotBlank(termId)) {					sqlTar.append(" and C_TERM_ID = '");					sqlTar.append(termId);					sqlTar.append("'");					topSql.append(" and C_TERM_ID = '");					topSql.append(termId);					topSql.append("'");				}				cal.add(Calendar.DAY_OF_MONTH, -1);				isFirst = false;			}			int beginRow = (page.getPageNo() - 1) * page.getPageSize();			if (DBDialectHelper.isOracle()) {				topSql.append(" ) where  ROWNUM <=");				topSql.append(queryMaxRows);				sql = topSql.toString();				ps = this.getConnection().prepareStatement(sql);				rs = ps.executeQuery();				if (rs.next()) {					totalNum = rs.getInt("TOTALNUM");				}			} else if (DBDialectHelper.isMySql()) {				topSql.append("  limit ");				topSql.append(queryMaxRows);				sql = topSql.toString();				ps = this.getConnection().prepareStatement(sql);				rs = ps.executeQuery();				while (rs.next()) {					totalNum++;				}			}			rs.close();			rs = null;			ps.close();			ps = null;			totalNum = Math.min(totalNum, queryMaxRows);			endRow = page.getPageNo() * page.getPageSize();			sql = getPageSql(sqlTar.toString(), beginRow, endRow, page					.getPageSize());			ps = this.getConnection().prepareStatement(sql);			rs = ps.executeQuery();			while (rs.next()) {				CmlSentInfo cmlSentInfo = new CmlSentInfo();				cmlSentInfo.setId(rs.getString("I_ID"));				cmlSentInfo						.setBarcodeFlowNum(rs.getString("C_BARCODE_FLOWNUM"));				cmlSentInfo.setSeriaNo(rs.getString("C_SERIA_NO"));				cmlSentInfo.setNoteType(rs.getString("C_NOTE_TYPE"));				cmlSentInfo.setCurrency(rs.getString("C_CURRENCY"));				cmlSentInfo.setDenomination(rs.getString("C_DENOMINATION"));				cmlSentInfo.setTermId(rs.getString("C_TERM_ID"));				cmlSentInfo.setTranDate(rs.getString("C_TRAN_DATE"));				cmlSentInfo.setPathcode(rs.getString("C_PATHCODE"));				cmlSentInfo.setVersionNum(rs.getString("C_VERSION_NUM"));				cmlSentInfo.setFromTableName(rs.getString("C_FROM_TABLE_NAME"));				cmlSentInfo.setType(rs.getString("C_TYPE"));				cmlSentInfo.setMachineType(rs.getString("C_MACHINE_TYPE"));				cmlSentInfo.setMoneyType(rs.getString("C_MONEY_TYPE"));				queryResult.add(cmlSentInfo);			}			sqlTar = new StringBuilder(" ");			topSql = new StringBuilder(" ");			sql = null;			isFirst = true;		} catch (SQLException e) {			throw new SysException(e);		} catch (ParseException e1) {			throw new SysException(e1);		} finally {			this.closeResultSet(rs);			this.closePreparedStatement(ps);			this.closeConnection();		}		page.setResult(queryResult);		page.setTotalCount(totalNum);		return page;	}	/**	 * 多表拼接好的SQL，传入进来转化为分页SQL语句	 * 	 * @Description:	 * @param sql	 * @param begiRow	 * @param endRow	 * @return	 * @author Norman_chang	 * @since 2014-7-1 下午04:57:03	 */	public String getPageSql(String sql, int begiRow, int endRow, int pageSize) {		StringBuilder sqlStr = new StringBuilder(" ");		if (DBDialectHelper.isOracle()) {			sqlStr.append(" SELECT * FROM (SELECT a.*, ROWNUM rn FROM ( ");			sqlStr.append(sql);			sqlStr.append(" ) a WHERE ROWNUM <= ");			sqlStr.append(endRow);			sqlStr.append(" ) WHERE rn > ");			sqlStr.append(begiRow);			return sqlStr.toString();		} else {			sqlStr.append(sql);			sqlStr.append(" limit ");			sqlStr.append(begiRow);			sqlStr.append(",");			sqlStr.append(pageSize);			return sqlStr.toString();		}	}	/**	 * 根据冠字号码和表名获得冠字号列表	 * 	 * @return	 */	public List<CmlSentInfo> getCmlSentInfosByNOAndTableName(String serialNO,			String tableName) {		String sql = "select * from " + tableName + " where C_SERIA_NO=?";		Object[] sqlParams = new Object[] { serialNO };		try {			List<CmlSentInfo> result = this.executeQuery(sql, sqlParams,					new CmlSentInfosMapper());			return result;		} catch (SQLException e) {			throw new SysException(e);		}	}	/**	 * 根据交易ID和表名获得冠字号列表	 * 	 * @return	 */	public List<CmlSentInfo> getCmlSentInfosByTranIDAndTableName(String tranID,			String tableName) {		String sql = "select distinct * from " + tableName				+ " where C_TRAN_ID=?";		Object[] sqlParams = new Object[] { tranID };		try {			List<CmlSentInfo> result = this.executeQuery(sql, sqlParams,					new CmlSentInfosMapper());			return result;		} catch (SQLException e) {			throw new SysException(e);		}	}	/**	 * 	 * @Description:	 * @param parameter	 * @return Map<String, Object>	 * @author whxing	 * @since 2014-9-16 上午10:35:37	 */	@SuppressWarnings("unchecked")	public CmlSentInfoStatisVO getCmlSentSearchInfoForVO(			Map<String, Object> parameter) throws SysException {		CmlSentInfoStatisVO cmlSentInfoStatisVO = new CmlSentInfoStatisVO();		Date endTime = (Date) parameter.get("endTime");		String seriaNo = (String) parameter.get("serialNo");		PreparedStatement ps = null;		ResultSet rs = null;		Calendar cal = Calendar.getInstance();		String tableName = null;		StringBuilder sqlTar = new StringBuilder(" ");		StringBuilder sqlStr = new StringBuilder(" ");		String daysDiffStr = "";		int daysDiff = 0;		String sql = null;		try {			cal.setTime(endTime);			daysDiffStr = (String) parameter.get("daysDiff");			if ("" != daysDiffStr) {				daysDiff = Integer.parseInt(daysDiffStr);			}			for (; daysDiff >= 0; daysDiff--) {				tableName = "CML_SENT_INFOS_HIS_"						+ DateUtil.parseToString(cal.getTime(), "MMdd");				sqlTar						.append(" select i_id,c_barcode_flownum,c_seria_no,c_note_type,c_currency,c_pathcode,c_version_num,c_denomination,c_term_id,c_tran_date, '");				sqlTar.append(tableName);				sqlTar.append("' as C_FROM_TABLE_NAME from  ");				sqlTar.append(tableName);				sqlTar.append(" where  1=1");				if (StringUtils.isNotBlank(seriaNo)) {					sqlTar.append(" and C_SERIA_NO = '");					sqlTar.append(seriaNo);					sqlTar.append("'");				}				sqlTar.append("  union all ");				cal.add(Calendar.DAY_OF_MONTH, -1);			}			sqlTar.delete(sqlTar.length() - ("  union all ").length(), sqlTar					.length());			if (DBDialectHelper.isOracle()) {				sqlStr.append(" SELECT * FROM  ( ");				sqlStr.append(sqlTar.toString());				sqlStr.append(")");			} else {				sqlStr.append(sqlTar.toString());			}			sql = sqlStr.toString();			ps = this.getConnection().prepareStatement(sql);			rs = ps.executeQuery();			cmlSentInfoStatisVO = compareRecordDate(rs);			sqlTar = new StringBuilder(" ");			sql = null;		} catch (SQLException e) {			throw new SysException(e);		} finally {			this.closePreparedStatement(ps);			this.closeConnection();		}		return cmlSentInfoStatisVO;	}	// 时间的比较，查找最新交易时间状态	protected CmlSentInfoStatisVO compareRecordDate(ResultSet rs) {		int queryCount = 1;		CmlSentInfoStatisVO cmlSentInfoStatisVO = new CmlSentInfoStatisVO();		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");		Date recentlyDate = null;		try {			// 存在冠字号码，结果集不为空			if (rs.next()) {				rs.getString("C_TRAN_DATE");				recentlyDate = sdf.parse(rs.getString("C_TRAN_DATE"));				cmlSentInfoStatisVO.setNoteType(Integer.parseInt(rs						.getString("C_NOTE_TYPE")));				while (rs.next()) {					queryCount++;					Date bDate = sdf.parse(rs.getString("C_TRAN_DATE"));					// 两个日期的比较					boolean flag = recentlyDate.before(bDate);					if (flag) {						recentlyDate = bDate;						cmlSentInfoStatisVO.setNoteType(Integer.parseInt(rs								.getString("C_NOTE_TYPE")));					}				}				SimpleDateFormat sdf2 = new SimpleDateFormat(						"yyyy-MM-dd HH:mm:ss");				cmlSentInfoStatisVO.setRecordDate(sdf2.format(recentlyDate));				cmlSentInfoStatisVO.setQueryCount(queryCount);				cmlSentInfoStatisVO.setQueryResult(1);			}			// 冠字号码不存在			else {				cmlSentInfoStatisVO.setQueryResult(0);				cmlSentInfoStatisVO.setQueryCount(0);			}		} catch (ParseException e) {			throw new SysException(e);		} catch (SQLException e1) {			throw new SysException(e1);		} finally {			this.closeResultSet(rs);			this.closeConnection();		}		return cmlSentInfoStatisVO;	}}